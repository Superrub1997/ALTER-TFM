/*
 * generated by Xtext 2.28.0
 */
package ardsl.ide.contentassist.antlr;

import ardsl.ide.contentassist.antlr.internal.InternalArdslParser;
import ardsl.services.ArdslGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ArdslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArdslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArdslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getOntologicalAccess().getGroup(), "rule__Ontological__Group__0");
			builder.put(grammarAccess.getOntologicalAccess().getGroup_3(), "rule__Ontological__Group_3__0");
			builder.put(grammarAccess.getOntologicalAccess().getGroup_7(), "rule__Ontological__Group_7__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
			builder.put(grammarAccess.getClassAccess().getGroup_2_1(), "rule__Class__Group_2_1__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3_3(), "rule__Class__Group_3_3__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup_3(), "rule__Reference__Group_3__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup_10(), "rule__Reference__Group_10__0");
			builder.put(grammarAccess.getOntologicalAccess().getNameAssignment_1(), "rule__Ontological__NameAssignment_1");
			builder.put(grammarAccess.getOntologicalAccess().getURIAssignment_3_1(), "rule__Ontological__URIAssignment_3_1");
			builder.put(grammarAccess.getOntologicalAccess().getClassesAssignment_6(), "rule__Ontological__ClassesAssignment_6");
			builder.put(grammarAccess.getOntologicalAccess().getClassesAssignment_7_1(), "rule__Ontological__ClassesAssignment_7_1");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_0(), "rule__Class__NameAssignment_0");
			builder.put(grammarAccess.getClassAccess().getAttributesAssignment_2_0(), "rule__Class__AttributesAssignment_2_0");
			builder.put(grammarAccess.getClassAccess().getAttributesAssignment_2_1_1(), "rule__Class__AttributesAssignment_2_1_1");
			builder.put(grammarAccess.getClassAccess().getReferencesAssignment_3_2(), "rule__Class__ReferencesAssignment_3_2");
			builder.put(grammarAccess.getClassAccess().getReferencesAssignment_3_3_1(), "rule__Class__ReferencesAssignment_3_3_1");
			builder.put(grammarAccess.getClassAccess().getAbstractAssignment_5(), "rule__Class__AbstractAssignment_5");
			builder.put(grammarAccess.getClassAccess().getNoSCNAssignment_6(), "rule__Class__NoSCNAssignment_6");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getAttributeAccess().getMinAssignment_4(), "rule__Attribute__MinAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getMaxAssignment_6(), "rule__Attribute__MaxAssignment_6");
			builder.put(grammarAccess.getAttributeAccess().getDefaultAssignment_9(), "rule__Attribute__DefaultAssignment_9");
			builder.put(grammarAccess.getAttributeAccess().getIsParamAssignment_10(), "rule__Attribute__IsParamAssignment_10");
			builder.put(grammarAccess.getAttributeAccess().getIsKeyAssignment_11(), "rule__Attribute__IsKeyAssignment_11");
			builder.put(grammarAccess.getAttributeAccess().getReadOnlyAssignment_12(), "rule__Attribute__ReadOnlyAssignment_12");
			builder.put(grammarAccess.getReferenceAccess().getNameAssignment_1(), "rule__Reference__NameAssignment_1");
			builder.put(grammarAccess.getReferenceAccess().getContaintmentAssignment_3_1(), "rule__Reference__ContaintmentAssignment_3_1");
			builder.put(grammarAccess.getReferenceAccess().getMinAssignment_5(), "rule__Reference__MinAssignment_5");
			builder.put(grammarAccess.getReferenceAccess().getMaxAssignment_7(), "rule__Reference__MaxAssignment_7");
			builder.put(grammarAccess.getReferenceAccess().getTargetAssignment_9(), "rule__Reference__TargetAssignment_9");
			builder.put(grammarAccess.getReferenceAccess().getOppositeAssignment_10_1(), "rule__Reference__OppositeAssignment_10_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArdslGrammarAccess grammarAccess;

	@Override
	protected InternalArdslParser createParser() {
		InternalArdslParser result = new InternalArdslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArdslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
