/*
 * generated by Xtext 2.28.0
 */
package ardsl.serializer;

import Ontologicals.Attribute;
import Ontologicals.Ontological;
import Ontologicals.OntologicalsPackage;
import Ontologicals.Reference;
import ardsl.services.ArdslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ArdslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ArdslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OntologicalsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OntologicalsPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case OntologicalsPackage.CLASS:
				sequence_Class(context, (Ontologicals.Class) semanticObject); 
				return; 
			case OntologicalsPackage.ONTOLOGICAL:
				sequence_Ontological(context, (Ontological) semanticObject); 
				return; 
			case OntologicalsPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=EString 
	 *         min=EString 
	 *         max=EString 
	 *         default=EString 
	 *         isParam?='isParam'? 
	 *         isKey?='isKey'? 
	 *         readOnly?='readOnly'?
	 *     )
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (attributes+=Attribute attributes+=Attribute*)? 
	 *         (references+=Reference references+=Reference*)? 
	 *         abstract?='abstract'? 
	 *         noSCN?='invisible'?
	 *     )
	 * </pre>
	 */
	protected void sequence_Class(ISerializationContext context, Ontologicals.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ontological returns Ontological
	 *
	 * Constraint:
	 *     (name=EString URI=EString? classes+=Class classes+=Class*)
	 * </pre>
	 */
	protected void sequence_Ontological(ISerializationContext context, Ontological semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         containtment=EString? 
	 *         min=EString 
	 *         max=EString 
	 *         target=EString 
	 *         opposite=EString?
	 *     )
	 * </pre>
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
