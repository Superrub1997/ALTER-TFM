/*
 * generated by Xtext 2.28.0
 */
package ardsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArdslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OntologicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Ontological");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cURIKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cURIAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cURIEStringParserRuleCall_3_1_0 = (RuleCall)cURIAssignment_3_1.eContents().get(0);
		private final Keyword cElementsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesClassParserRuleCall_6_0 = (RuleCall)cClassesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cClassesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cClassesClassParserRuleCall_7_1_0 = (RuleCall)cClassesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////preguntar a lissete sobre wizards
		//Ontological returns Ontologicals::Ontological:
		//    'Game'
		//    name=EString
		//    '{'
		//        ('URI' URI=EString)?
		//        'elements' '{' classes+=Class ( "," classes+=Class)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Game'
		//name=EString
		//'{'
		//    ('URI' URI=EString)?
		//    'elements' '{' classes+=Class ( "," classes+=Class)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('URI' URI=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'URI'
		public Keyword getURIKeyword_3_0() { return cURIKeyword_3_0; }
		
		//URI=EString
		public Assignment getURIAssignment_3_1() { return cURIAssignment_3_1; }
		
		//EString
		public RuleCall getURIEStringParserRuleCall_3_1_0() { return cURIEStringParserRuleCall_3_1_0; }
		
		//'elements'
		public Keyword getElementsKeyword_4() { return cElementsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//classes+=Class
		public Assignment getClassesAssignment_6() { return cClassesAssignment_6; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_6_0() { return cClassesClassParserRuleCall_6_0; }
		
		//( "," classes+=Class)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//classes+=Class
		public Assignment getClassesAssignment_7_1() { return cClassesAssignment_7_1; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_7_1_0() { return cClassesClassParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDependencesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cReferencesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cReferencesReferenceParserRuleCall_3_2_0 = (RuleCall)cReferencesAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cReferencesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cReferencesReferenceParserRuleCall_3_3_1_0 = (RuleCall)cReferencesAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAbstractAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cAbstractAbstractKeyword_5_0 = (Keyword)cAbstractAssignment_5.eContents().get(0);
		private final Assignment cNoSCNAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cNoSCNInvisibleKeyword_6_0 = (Keyword)cNoSCNAssignment_6.eContents().get(0);
		
		//Class returns Ontologicals::Class:
		//    name=EString
		//    '{'
		//        (attributes+=Attribute ( "," attributes+=Attribute)*)?
		//        ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		//    '}'
		//    (abstract?='abstract')?
		//    (noSCN?='invisible')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    (attributes+=Attribute ( "," attributes+=Attribute)*)?
		//    ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		//'}'
		//(abstract?='abstract')?
		//(noSCN?='invisible')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attributes+=Attribute ( "," attributes+=Attribute)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0_0() { return cAttributesAttributeParserRuleCall_2_0_0; }
		
		//( "," attributes+=Attribute)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_1() { return cAttributesAssignment_2_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_1_0() { return cAttributesAttributeParserRuleCall_2_1_1_0; }
		
		//('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dependences'
		public Keyword getDependencesKeyword_3_0() { return cDependencesKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//references+=Reference
		public Assignment getReferencesAssignment_3_2() { return cReferencesAssignment_3_2; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_3_2_0() { return cReferencesReferenceParserRuleCall_3_2_0; }
		
		//( "," references+=Reference)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//references+=Reference
		public Assignment getReferencesAssignment_3_3_1() { return cReferencesAssignment_3_3_1; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_3_3_1_0() { return cReferencesReferenceParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_5() { return cAbstractAssignment_5; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_5_0() { return cAbstractAbstractKeyword_5_0; }
		
		//(noSCN?='invisible')?
		public Assignment getNoSCNAssignment_6() { return cNoSCNAssignment_6; }
		
		//'invisible'
		public Keyword getNoSCNInvisibleKeyword_6_0() { return cNoSCNInvisibleKeyword_6_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEStringParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinEStringParserRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxEStringParserRuleCall_6_0 = (RuleCall)cMaxAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDefaultAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDefaultEStringParserRuleCall_9_0 = (RuleCall)cDefaultAssignment_9.eContents().get(0);
		private final Assignment cIsParamAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cIsParamIsParamKeyword_10_0 = (Keyword)cIsParamAssignment_10.eContents().get(0);
		private final Assignment cIsKeyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cIsKeyIsKeyKeyword_11_0 = (Keyword)cIsKeyAssignment_11.eContents().get(0);
		private final Assignment cReadOnlyAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cReadOnlyReadOnlyKeyword_12_0 = (Keyword)cReadOnlyAssignment_12.eContents().get(0);
		
		//Attribute returns Ontologicals::Attribute:
		//    name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
		//    (isParam?='isParam')?
		//    (isKey?='isKey')?
		//    (readOnly?='readOnly')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
		//(isParam?='isParam')?
		//(isKey?='isKey')?
		//(readOnly?='readOnly')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=EString
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_2_0() { return cTypeEStringParserRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//min=EString
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }
		
		//EString
		public RuleCall getMinEStringParserRuleCall_4_0() { return cMinEStringParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//max=EString
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }
		
		//EString
		public RuleCall getMaxEStringParserRuleCall_6_0() { return cMaxEStringParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//default=EString
		public Assignment getDefaultAssignment_9() { return cDefaultAssignment_9; }
		
		//EString
		public RuleCall getDefaultEStringParserRuleCall_9_0() { return cDefaultEStringParserRuleCall_9_0; }
		
		//(isParam?='isParam')?
		public Assignment getIsParamAssignment_10() { return cIsParamAssignment_10; }
		
		//'isParam'
		public Keyword getIsParamIsParamKeyword_10_0() { return cIsParamIsParamKeyword_10_0; }
		
		//(isKey?='isKey')?
		public Assignment getIsKeyAssignment_11() { return cIsKeyAssignment_11; }
		
		//'isKey'
		public Keyword getIsKeyIsKeyKeyword_11_0() { return cIsKeyIsKeyKeyword_11_0; }
		
		//(readOnly?='readOnly')?
		public Assignment getReadOnlyAssignment_12() { return cReadOnlyAssignment_12; }
		
		//'readOnly'
		public Keyword getReadOnlyReadOnlyKeyword_12_0() { return cReadOnlyReadOnlyKeyword_12_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cContaintmentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cContaintmentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cContaintmentEStringParserRuleCall_3_1_0 = (RuleCall)cContaintmentAssignment_3_1.eContents().get(0);
		private final Keyword cMinKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinEStringParserRuleCall_5_0 = (RuleCall)cMinAssignment_5.eContents().get(0);
		private final Keyword cMaxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxEStringParserRuleCall_7_0 = (RuleCall)cMaxAssignment_7.eContents().get(0);
		private final Keyword cTargetKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTargetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTargetEStringParserRuleCall_9_0 = (RuleCall)cTargetAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOppositeKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cOppositeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOppositeEStringParserRuleCall_10_1_0 = (RuleCall)cOppositeAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Reference returns Ontologicals::Reference:
		//    'Dependence'
		//    name=EString
		//    '{'
		//        ('containtment' containtment=EString)?
		//        'min' min=EString
		//        'max' max=EString
		//        'target' target=EString
		//        ('opposite' opposite=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Dependence'
		//name=EString
		//'{'
		//    ('containtment' containtment=EString)?
		//    'min' min=EString
		//    'max' max=EString
		//    'target' target=EString
		//    ('opposite' opposite=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Dependence'
		public Keyword getDependenceKeyword_0() { return cDependenceKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('containtment' containtment=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'containtment'
		public Keyword getContaintmentKeyword_3_0() { return cContaintmentKeyword_3_0; }
		
		//containtment=EString
		public Assignment getContaintmentAssignment_3_1() { return cContaintmentAssignment_3_1; }
		
		//EString
		public RuleCall getContaintmentEStringParserRuleCall_3_1_0() { return cContaintmentEStringParserRuleCall_3_1_0; }
		
		//'min'
		public Keyword getMinKeyword_4() { return cMinKeyword_4; }
		
		//min=EString
		public Assignment getMinAssignment_5() { return cMinAssignment_5; }
		
		//EString
		public RuleCall getMinEStringParserRuleCall_5_0() { return cMinEStringParserRuleCall_5_0; }
		
		//'max'
		public Keyword getMaxKeyword_6() { return cMaxKeyword_6; }
		
		//max=EString
		public Assignment getMaxAssignment_7() { return cMaxAssignment_7; }
		
		//EString
		public RuleCall getMaxEStringParserRuleCall_7_0() { return cMaxEStringParserRuleCall_7_0; }
		
		//'target'
		public Keyword getTargetKeyword_8() { return cTargetKeyword_8; }
		
		//target=EString
		public Assignment getTargetAssignment_9() { return cTargetAssignment_9; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_9_0() { return cTargetEStringParserRuleCall_9_0; }
		
		//('opposite' opposite=EString)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'opposite'
		public Keyword getOppositeKeyword_10_0() { return cOppositeKeyword_10_0; }
		
		//opposite=EString
		public Assignment getOppositeAssignment_10_1() { return cOppositeAssignment_10_1; }
		
		//EString
		public RuleCall getOppositeEStringParserRuleCall_10_1_0() { return cOppositeEStringParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	
	
	private final OntologicalElements pOntological;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final ReferenceElements pReference;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOntological = new OntologicalElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pReference = new ReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ardsl.Ardsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////preguntar a lissete sobre wizards
	//Ontological returns Ontologicals::Ontological:
	//    'Game'
	//    name=EString
	//    '{'
	//        ('URI' URI=EString)?
	//        'elements' '{' classes+=Class ( "," classes+=Class)* '}'
	//    '}';
	public OntologicalElements getOntologicalAccess() {
		return pOntological;
	}
	
	public ParserRule getOntologicalRule() {
		return getOntologicalAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Class returns Ontologicals::Class:
	//    name=EString
	//    '{'
	//        (attributes+=Attribute ( "," attributes+=Attribute)*)?
	//        ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
	//    '}'
	//    (abstract?='abstract')?
	//    (noSCN?='invisible')?;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute returns Ontologicals::Attribute:
	//    name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
	//    (isParam?='isParam')?
	//    (isKey?='isKey')?
	//    (readOnly?='readOnly')?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Reference returns Ontologicals::Reference:
	//    'Dependence'
	//    name=EString
	//    '{'
	//        ('containtment' containtment=EString)?
	//        'min' min=EString
	//        'max' max=EString
	//        'target' target=EString
	//        ('opposite' opposite=EString)?
	//    '}';
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
