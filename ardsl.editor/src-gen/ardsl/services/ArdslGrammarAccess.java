/*
 * generated by Xtext 2.28.0
 */
package ardsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArdslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class OntologicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Ontological");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cURIKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cURIAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cURIEStringParserRuleCall_3_1_0 = (RuleCall)cURIAssignment_3_1.eContents().get(0);
		private final Keyword cElementsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesClassParserRuleCall_6_0 = (RuleCall)cClassesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cClassesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cClassesClassParserRuleCall_7_1_0 = (RuleCall)cClassesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cGraphicAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cGraphicGraphicParserRuleCall_10_0 = (RuleCall)cGraphicAssignment_10.eContents().get(0);
		private final Assignment cPhysicAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPhysicPhysicsParserRuleCall_11_0 = (RuleCall)cPhysicAssignment_11.eContents().get(0);
		private final Assignment cGameloopAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cGameloopGameloopParserRuleCall_12_0 = (RuleCall)cGameloopAssignment_12.eContents().get(0);
		
		////preguntar a lissete sobre wizards
		//Ontological returns Ontologicals::Ontological:
		//    'Game'
		//    name=EString
		//    '{'
		//        ('URI' URI=EString)?
		//        'elements' '{' classes+=Class ( "," classes+=Class)* '}'
		//    '}'
		//    graphic=Graphic
		//    physic=Physics
		//    gameloop=Gameloop
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Game'
		//name=EString
		//'{'
		//    ('URI' URI=EString)?
		//    'elements' '{' classes+=Class ( "," classes+=Class)* '}'
		//'}'
		//graphic=Graphic
		//physic=Physics
		//gameloop=Gameloop
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('URI' URI=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'URI'
		public Keyword getURIKeyword_3_0() { return cURIKeyword_3_0; }
		
		//URI=EString
		public Assignment getURIAssignment_3_1() { return cURIAssignment_3_1; }
		
		//EString
		public RuleCall getURIEStringParserRuleCall_3_1_0() { return cURIEStringParserRuleCall_3_1_0; }
		
		//'elements'
		public Keyword getElementsKeyword_4() { return cElementsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//classes+=Class
		public Assignment getClassesAssignment_6() { return cClassesAssignment_6; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_6_0() { return cClassesClassParserRuleCall_6_0; }
		
		//( "," classes+=Class)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//classes+=Class
		public Assignment getClassesAssignment_7_1() { return cClassesAssignment_7_1; }
		
		//Class
		public RuleCall getClassesClassParserRuleCall_7_1_0() { return cClassesClassParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//graphic=Graphic
		public Assignment getGraphicAssignment_10() { return cGraphicAssignment_10; }
		
		//Graphic
		public RuleCall getGraphicGraphicParserRuleCall_10_0() { return cGraphicGraphicParserRuleCall_10_0; }
		
		//physic=Physics
		public Assignment getPhysicAssignment_11() { return cPhysicAssignment_11; }
		
		//Physics
		public RuleCall getPhysicPhysicsParserRuleCall_11_0() { return cPhysicPhysicsParserRuleCall_11_0; }
		
		//gameloop=Gameloop
		public Assignment getGameloopAssignment_12() { return cGameloopAssignment_12; }
		
		//Gameloop
		public RuleCall getGameloopGameloopParserRuleCall_12_0() { return cGameloopGameloopParserRuleCall_12_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0_0 = (RuleCall)cAttributesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_1_0 = (RuleCall)cAttributesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDependencesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cReferencesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cReferencesReferenceParserRuleCall_3_2_0 = (RuleCall)cReferencesAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cReferencesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cReferencesReferenceParserRuleCall_3_3_1_0 = (RuleCall)cReferencesAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAbstractAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cAbstractAbstractKeyword_5_0 = (Keyword)cAbstractAssignment_5.eContents().get(0);
		private final Assignment cNoSCNAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cNoSCNInvisibleKeyword_6_0 = (Keyword)cNoSCNAssignment_6.eContents().get(0);
		
		//Class returns Ontologicals::Class:
		//    name=EString
		//    '{'
		//        (attributes+=Attribute ( "," attributes+=Attribute)*)?
		//        ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		//    '}'
		//    (abstract?='abstract')?
		//    (noSCN?='invisible')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'{'
		//    (attributes+=Attribute ( "," attributes+=Attribute)*)?
		//    ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		//'}'
		//(abstract?='abstract')?
		//(noSCN?='invisible')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(attributes+=Attribute ( "," attributes+=Attribute)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_0() { return cAttributesAssignment_2_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0_0() { return cAttributesAttributeParserRuleCall_2_0_0; }
		
		//( "," attributes+=Attribute)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_2_1_1() { return cAttributesAssignment_2_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_1_0() { return cAttributesAttributeParserRuleCall_2_1_1_0; }
		
		//('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'dependences'
		public Keyword getDependencesKeyword_3_0() { return cDependencesKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//references+=Reference
		public Assignment getReferencesAssignment_3_2() { return cReferencesAssignment_3_2; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_3_2_0() { return cReferencesReferenceParserRuleCall_3_2_0; }
		
		//( "," references+=Reference)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//references+=Reference
		public Assignment getReferencesAssignment_3_3_1() { return cReferencesAssignment_3_3_1; }
		
		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_3_3_1_0() { return cReferencesReferenceParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//(abstract?='abstract')?
		public Assignment getAbstractAssignment_5() { return cAbstractAssignment_5; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_5_0() { return cAbstractAbstractKeyword_5_0; }
		
		//(noSCN?='invisible')?
		public Assignment getNoSCNAssignment_6() { return cNoSCNAssignment_6; }
		
		//'invisible'
		public Keyword getNoSCNInvisibleKeyword_6_0() { return cNoSCNInvisibleKeyword_6_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeEStringParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinEStringParserRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxEStringParserRuleCall_6_0 = (RuleCall)cMaxAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDefaultAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDefaultEStringParserRuleCall_9_0 = (RuleCall)cDefaultAssignment_9.eContents().get(0);
		private final Assignment cIsParamAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Keyword cIsParamIsParamKeyword_10_0 = (Keyword)cIsParamAssignment_10.eContents().get(0);
		private final Assignment cIsKeyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cIsKeyIsKeyKeyword_11_0 = (Keyword)cIsKeyAssignment_11.eContents().get(0);
		private final Assignment cReadOnlyAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Keyword cReadOnlyReadOnlyKeyword_12_0 = (Keyword)cReadOnlyAssignment_12.eContents().get(0);
		
		//Attribute returns Ontologicals::Attribute:
		//    name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
		//    (isParam?='isParam')?
		//    (isKey?='isKey')?
		//    (readOnly?='readOnly')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
		//(isParam?='isParam')?
		//(isKey?='isKey')?
		//(readOnly?='readOnly')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=EString
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_2_0() { return cTypeEStringParserRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//min=EString
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }
		
		//EString
		public RuleCall getMinEStringParserRuleCall_4_0() { return cMinEStringParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//max=EString
		public Assignment getMaxAssignment_6() { return cMaxAssignment_6; }
		
		//EString
		public RuleCall getMaxEStringParserRuleCall_6_0() { return cMaxEStringParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//default=EString
		public Assignment getDefaultAssignment_9() { return cDefaultAssignment_9; }
		
		//EString
		public RuleCall getDefaultEStringParserRuleCall_9_0() { return cDefaultEStringParserRuleCall_9_0; }
		
		//(isParam?='isParam')?
		public Assignment getIsParamAssignment_10() { return cIsParamAssignment_10; }
		
		//'isParam'
		public Keyword getIsParamIsParamKeyword_10_0() { return cIsParamIsParamKeyword_10_0; }
		
		//(isKey?='isKey')?
		public Assignment getIsKeyAssignment_11() { return cIsKeyAssignment_11; }
		
		//'isKey'
		public Keyword getIsKeyIsKeyKeyword_11_0() { return cIsKeyIsKeyKeyword_11_0; }
		
		//(readOnly?='readOnly')?
		public Assignment getReadOnlyAssignment_12() { return cReadOnlyAssignment_12; }
		
		//'readOnly'
		public Keyword getReadOnlyReadOnlyKeyword_12_0() { return cReadOnlyReadOnlyKeyword_12_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cContaintmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cContaintmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cContaintmentEStringParserRuleCall_1_1_0 = (RuleCall)cContaintmentAssignment_1_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinEStringParserRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cMaxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxEStringParserRuleCall_5_0 = (RuleCall)cMaxAssignment_5.eContents().get(0);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTargetEStringParserRuleCall_7_0 = (RuleCall)cTargetAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOppositeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cOppositeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cOppositeEStringParserRuleCall_8_1_0 = (RuleCall)cOppositeAssignment_8_1.eContents().get(0);
		
		//Reference returns Ontologicals::Reference:
		//    name=EString
		//        ('containtment' containtment=EString)?
		//        'min' min=EString
		//        'max' max=EString
		//        'target' target=EString
		//        ('opposite' opposite=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//    ('containtment' containtment=EString)?
		//    'min' min=EString
		//    'max' max=EString
		//    'target' target=EString
		//    ('opposite' opposite=EString)?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//('containtment' containtment=EString)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'containtment'
		public Keyword getContaintmentKeyword_1_0() { return cContaintmentKeyword_1_0; }
		
		//containtment=EString
		public Assignment getContaintmentAssignment_1_1() { return cContaintmentAssignment_1_1; }
		
		//EString
		public RuleCall getContaintmentEStringParserRuleCall_1_1_0() { return cContaintmentEStringParserRuleCall_1_1_0; }
		
		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
		
		//min=EString
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }
		
		//EString
		public RuleCall getMinEStringParserRuleCall_3_0() { return cMinEStringParserRuleCall_3_0; }
		
		//'max'
		public Keyword getMaxKeyword_4() { return cMaxKeyword_4; }
		
		//max=EString
		public Assignment getMaxAssignment_5() { return cMaxAssignment_5; }
		
		//EString
		public RuleCall getMaxEStringParserRuleCall_5_0() { return cMaxEStringParserRuleCall_5_0; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//target=EString
		public Assignment getTargetAssignment_7() { return cTargetAssignment_7; }
		
		//EString
		public RuleCall getTargetEStringParserRuleCall_7_0() { return cTargetEStringParserRuleCall_7_0; }
		
		//('opposite' opposite=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'opposite'
		public Keyword getOppositeKeyword_8_0() { return cOppositeKeyword_8_0; }
		
		//opposite=EString
		public Assignment getOppositeAssignment_8_1() { return cOppositeAssignment_8_1; }
		
		//EString
		public RuleCall getOppositeEStringParserRuleCall_8_1_0() { return cOppositeEStringParserRuleCall_8_1_0; }
	}
	public class GraphicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Graphic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesGraphicClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Graphic returns Graphics::Graphic:
		//    'Graphic''{'
		//    classes+=GraphicClass
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Graphic''{'
		//classes+=GraphicClass
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Graphic'
		public Keyword getGraphicKeyword_0() { return cGraphicKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//classes+=GraphicClass
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }
		
		//GraphicClass
		public RuleCall getClassesGraphicClassParserRuleCall_2_0() { return cClassesGraphicClassParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class GraphicClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.GraphicClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOntoClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOntoClassClassCrossReference_1_0 = (CrossReference)cOntoClassAssignment_1.eContents().get(0);
		private final RuleCall cOntoClassClassEStringParserRuleCall_1_0_1 = (RuleCall)cOntoClassClassCrossReference_1_0.eContents().get(1);
		private final Keyword cVersionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionsVersionsParserRuleCall_4_0 = (RuleCall)cVersionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVersionsNameKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVnameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cVnameVersionNameParserRuleCall_8_0 = (RuleCall)cVnameAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cConstraintsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cConstraintsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cConstraintsConstraintsParserRuleCall_12_0 = (RuleCall)cConstraintsAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//GraphicClass returns Graphics::GraphicClass:
		//    'element' ontoClass=[Ontologicals::Class|EString]
		//    'versions' '{' versions=Versions '}'
		//    'versionsName' '{' vname=VersionName '}'
		//    'constraints' '{' constraints=Constraints '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' ontoClass=[Ontologicals::Class|EString]
		//'versions' '{' versions=Versions '}'
		//'versionsName' '{' vname=VersionName '}'
		//'constraints' '{' constraints=Constraints '}'
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//ontoClass=[Ontologicals::Class|EString]
		public Assignment getOntoClassAssignment_1() { return cOntoClassAssignment_1; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getOntoClassClassCrossReference_1_0() { return cOntoClassClassCrossReference_1_0; }
		
		//EString
		public RuleCall getOntoClassClassEStringParserRuleCall_1_0_1() { return cOntoClassClassEStringParserRuleCall_1_0_1; }
		
		//'versions'
		public Keyword getVersionsKeyword_2() { return cVersionsKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//versions=Versions
		public Assignment getVersionsAssignment_4() { return cVersionsAssignment_4; }
		
		//Versions
		public RuleCall getVersionsVersionsParserRuleCall_4_0() { return cVersionsVersionsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//'versionsName'
		public Keyword getVersionsNameKeyword_6() { return cVersionsNameKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//vname=VersionName
		public Assignment getVnameAssignment_8() { return cVnameAssignment_8; }
		
		//VersionName
		public RuleCall getVnameVersionNameParserRuleCall_8_0() { return cVnameVersionNameParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_10() { return cConstraintsKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//constraints=Constraints
		public Assignment getConstraintsAssignment_12() { return cConstraintsAssignment_12; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_12_0() { return cConstraintsConstraintsParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class VersionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Versions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cV1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cV1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cV1EStringParserRuleCall_2_0 = (RuleCall)cV1Assignment_2.eContents().get(0);
		private final Keyword cV2Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cV2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cV2EStringParserRuleCall_5_0 = (RuleCall)cV2Assignment_5.eContents().get(0);
		private final Keyword cV3Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cV3Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cV3EStringParserRuleCall_8_0 = (RuleCall)cV3Assignment_8.eContents().get(0);
		
		//Versions returns Graphics::Versions:
		//    'v1' '->' v1=EString
		//    'v2' '->' v2=EString
		//    'v3' '->' v3=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'v1' '->' v1=EString
		//'v2' '->' v2=EString
		//'v3' '->' v3=EString
		public Group getGroup() { return cGroup; }
		
		//'v1'
		public Keyword getV1Keyword_0() { return cV1Keyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//v1=EString
		public Assignment getV1Assignment_2() { return cV1Assignment_2; }
		
		//EString
		public RuleCall getV1EStringParserRuleCall_2_0() { return cV1EStringParserRuleCall_2_0; }
		
		//'v2'
		public Keyword getV2Keyword_3() { return cV2Keyword_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//v2=EString
		public Assignment getV2Assignment_5() { return cV2Assignment_5; }
		
		//EString
		public RuleCall getV2EStringParserRuleCall_5_0() { return cV2EStringParserRuleCall_5_0; }
		
		//'v3'
		public Keyword getV3Keyword_6() { return cV3Keyword_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//v3=EString
		public Assignment getV3Assignment_8() { return cV3Assignment_8; }
		
		//EString
		public RuleCall getV3EStringParserRuleCall_8_0() { return cV3EStringParserRuleCall_8_0; }
	}
	public class VersionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.VersionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cV1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cV1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cV1EStringParserRuleCall_2_0 = (RuleCall)cV1Assignment_2.eContents().get(0);
		private final Keyword cV2Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cV2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cV2EStringParserRuleCall_5_0 = (RuleCall)cV2Assignment_5.eContents().get(0);
		private final Keyword cV3Keyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cV3Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cV3EStringParserRuleCall_8_0 = (RuleCall)cV3Assignment_8.eContents().get(0);
		
		//VersionName returns Graphics::VersionName:
		//    'v1' '->' v1=EString
		//    'v2' '->' v2=EString
		//    'v3' '->' v3=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'v1' '->' v1=EString
		//'v2' '->' v2=EString
		//'v3' '->' v3=EString
		public Group getGroup() { return cGroup; }
		
		//'v1'
		public Keyword getV1Keyword_0() { return cV1Keyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//v1=EString
		public Assignment getV1Assignment_2() { return cV1Assignment_2; }
		
		//EString
		public RuleCall getV1EStringParserRuleCall_2_0() { return cV1EStringParserRuleCall_2_0; }
		
		//'v2'
		public Keyword getV2Keyword_3() { return cV2Keyword_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//v2=EString
		public Assignment getV2Assignment_5() { return cV2Assignment_5; }
		
		//EString
		public RuleCall getV2EStringParserRuleCall_5_0() { return cV2EStringParserRuleCall_5_0; }
		
		//'v3'
		public Keyword getV3Keyword_6() { return cV3Keyword_6; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }
		
		//v3=EString
		public Assignment getV3Assignment_8() { return cV3Assignment_8; }
		
		//EString
		public RuleCall getV3EStringParserRuleCall_8_0() { return cV3EStringParserRuleCall_8_0; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlanesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlanesPlanesEnumRuleCall_1_0 = (RuleCall)cPlanesAssignment_1.eContents().get(0);
		private final Assignment cOverlappingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOverlappingOverlapsKeyword_2_0 = (Keyword)cOverlappingAssignment_2.eContents().get(0);
		private final Keyword cSizeMinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSizeMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSizeMinEDoubleParserRuleCall_4_0 = (RuleCall)cSizeMinAssignment_4.eContents().get(0);
		private final Keyword cSizeMaxKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSizeMaxAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSizeMaxEDoubleParserRuleCall_6_0 = (RuleCall)cSizeMaxAssignment_6.eContents().get(0);
		private final Keyword cXVariationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cXToOriginPosAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cXToOriginPosEDoubleParserRuleCall_8_0 = (RuleCall)cXToOriginPosAssignment_8.eContents().get(0);
		private final Keyword cYVariationKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cYToOriginPosAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cYToOriginPosEDoubleParserRuleCall_10_0 = (RuleCall)cYToOriginPosAssignment_10.eContents().get(0);
		private final Keyword cZVariationKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cZToOriginPosAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cZToOriginPosEDoubleParserRuleCall_12_0 = (RuleCall)cZToOriginPosAssignment_12.eContents().get(0);
		private final Keyword cRotationKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cRotationAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRotationEIntParserRuleCall_14_0 = (RuleCall)cRotationAssignment_14.eContents().get(0);
		
		//Constraints returns Graphics::Constraints:
		//    'plane' planes=Planes
		//    overlapping?='overlaps'
		//    'sizeMin' sizeMin=EDouble
		//    'sizeMax' sizeMax=EDouble
		//    'xVariation' xToOriginPos=EDouble
		//    'yVariation' yToOriginPos=EDouble
		//    'zVariation' zToOriginPos=EDouble
		//    'rotation' rotation=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'plane' planes=Planes
		//overlapping?='overlaps'
		//'sizeMin' sizeMin=EDouble
		//'sizeMax' sizeMax=EDouble
		//'xVariation' xToOriginPos=EDouble
		//'yVariation' yToOriginPos=EDouble
		//'zVariation' zToOriginPos=EDouble
		//'rotation' rotation=EInt
		public Group getGroup() { return cGroup; }
		
		//'plane'
		public Keyword getPlaneKeyword_0() { return cPlaneKeyword_0; }
		
		//planes=Planes
		public Assignment getPlanesAssignment_1() { return cPlanesAssignment_1; }
		
		//Planes
		public RuleCall getPlanesPlanesEnumRuleCall_1_0() { return cPlanesPlanesEnumRuleCall_1_0; }
		
		//overlapping?='overlaps'
		public Assignment getOverlappingAssignment_2() { return cOverlappingAssignment_2; }
		
		//'overlaps'
		public Keyword getOverlappingOverlapsKeyword_2_0() { return cOverlappingOverlapsKeyword_2_0; }
		
		//'sizeMin'
		public Keyword getSizeMinKeyword_3() { return cSizeMinKeyword_3; }
		
		//sizeMin=EDouble
		public Assignment getSizeMinAssignment_4() { return cSizeMinAssignment_4; }
		
		//EDouble
		public RuleCall getSizeMinEDoubleParserRuleCall_4_0() { return cSizeMinEDoubleParserRuleCall_4_0; }
		
		//'sizeMax'
		public Keyword getSizeMaxKeyword_5() { return cSizeMaxKeyword_5; }
		
		//sizeMax=EDouble
		public Assignment getSizeMaxAssignment_6() { return cSizeMaxAssignment_6; }
		
		//EDouble
		public RuleCall getSizeMaxEDoubleParserRuleCall_6_0() { return cSizeMaxEDoubleParserRuleCall_6_0; }
		
		//'xVariation'
		public Keyword getXVariationKeyword_7() { return cXVariationKeyword_7; }
		
		//xToOriginPos=EDouble
		public Assignment getXToOriginPosAssignment_8() { return cXToOriginPosAssignment_8; }
		
		//EDouble
		public RuleCall getXToOriginPosEDoubleParserRuleCall_8_0() { return cXToOriginPosEDoubleParserRuleCall_8_0; }
		
		//'yVariation'
		public Keyword getYVariationKeyword_9() { return cYVariationKeyword_9; }
		
		//yToOriginPos=EDouble
		public Assignment getYToOriginPosAssignment_10() { return cYToOriginPosAssignment_10; }
		
		//EDouble
		public RuleCall getYToOriginPosEDoubleParserRuleCall_10_0() { return cYToOriginPosEDoubleParserRuleCall_10_0; }
		
		//'zVariation'
		public Keyword getZVariationKeyword_11() { return cZVariationKeyword_11; }
		
		//zToOriginPos=EDouble
		public Assignment getZToOriginPosAssignment_12() { return cZToOriginPosAssignment_12; }
		
		//EDouble
		public RuleCall getZToOriginPosEDoubleParserRuleCall_12_0() { return cZToOriginPosEDoubleParserRuleCall_12_0; }
		
		//'rotation'
		public Keyword getRotationKeyword_13() { return cRotationKeyword_13; }
		
		//rotation=EInt
		public Assignment getRotationAssignment_14() { return cRotationAssignment_14; }
		
		//EInt
		public RuleCall getRotationEIntParserRuleCall_14_0() { return cRotationEIntParserRuleCall_14_0; }
	}
	public class PhysicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Physics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPhysicsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesPhysicClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Physics returns Physics::Physic:
		//    'Physics''{'
		//    classes+=PhysicClass
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Physics''{'
		//classes+=PhysicClass
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Physics'
		public Keyword getPhysicsKeyword_0() { return cPhysicsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//classes+=PhysicClass
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }
		
		//PhysicClass
		public RuleCall getClassesPhysicClassParserRuleCall_2_0() { return cClassesPhysicClassParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PhysicClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.PhysicClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOntoClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOntoClassClassCrossReference_1_0 = (CrossReference)cOntoClassAssignment_1.eContents().get(0);
		private final RuleCall cOntoClassClassEStringParserRuleCall_1_0_1 = (RuleCall)cOntoClassClassCrossReference_1_0.eContents().get(1);
		private final Keyword cBodyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPhysicBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPhysicBodyPhysicBodyParserRuleCall_4_0 = (RuleCall)cPhysicBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cForcesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cForcesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cForcesForcesParserRuleCall_6_2_0 = (RuleCall)cForcesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cForcesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cForcesForcesParserRuleCall_6_3_1_0 = (RuleCall)cForcesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cContactsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBitMasksAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBitMasksBitMasksParserRuleCall_9_0 = (RuleCall)cBitMasksAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PhysicClass returns Physics::PhysicClass:
		//    'element' ontoClass=[Ontologicals::Class|EString]
		//    'body' '{' physicBody=PhysicBody '}'
		//    ('forces' '{' forces+=Forces ( "," forces+=Forces)* '}')?
		//    'contacts' '{' bitMasks=BitMasks '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' ontoClass=[Ontologicals::Class|EString]
		//'body' '{' physicBody=PhysicBody '}'
		//('forces' '{' forces+=Forces ( "," forces+=Forces)* '}')?
		//'contacts' '{' bitMasks=BitMasks '}'
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//ontoClass=[Ontologicals::Class|EString]
		public Assignment getOntoClassAssignment_1() { return cOntoClassAssignment_1; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getOntoClassClassCrossReference_1_0() { return cOntoClassClassCrossReference_1_0; }
		
		//EString
		public RuleCall getOntoClassClassEStringParserRuleCall_1_0_1() { return cOntoClassClassEStringParserRuleCall_1_0_1; }
		
		//'body'
		public Keyword getBodyKeyword_2() { return cBodyKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//physicBody=PhysicBody
		public Assignment getPhysicBodyAssignment_4() { return cPhysicBodyAssignment_4; }
		
		//PhysicBody
		public RuleCall getPhysicBodyPhysicBodyParserRuleCall_4_0() { return cPhysicBodyPhysicBodyParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('forces' '{' forces+=Forces ( "," forces+=Forces)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'forces'
		public Keyword getForcesKeyword_6_0() { return cForcesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//forces+=Forces
		public Assignment getForcesAssignment_6_2() { return cForcesAssignment_6_2; }
		
		//Forces
		public RuleCall getForcesForcesParserRuleCall_6_2_0() { return cForcesForcesParserRuleCall_6_2_0; }
		
		//( "," forces+=Forces)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//forces+=Forces
		public Assignment getForcesAssignment_6_3_1() { return cForcesAssignment_6_3_1; }
		
		//Forces
		public RuleCall getForcesForcesParserRuleCall_6_3_1_0() { return cForcesForcesParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'contacts'
		public Keyword getContactsKeyword_7() { return cContactsKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//bitMasks=BitMasks
		public Assignment getBitMasksAssignment_9() { return cBitMasksAssignment_9; }
		
		//BitMasks
		public RuleCall getBitMasksBitMasksParserRuleCall_9_0() { return cBitMasksBitMasksParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class PhysicBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.PhysicBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMassEDoubleParserRuleCall_1_0 = (RuleCall)cMassAssignment_1.eContents().get(0);
		private final Keyword cBodyTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyTypeBodyTypeEnumRuleCall_3_0 = (RuleCall)cBodyTypeAssignment_3.eContents().get(0);
		private final Keyword cChargeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cChargeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChargeEDoubleParserRuleCall_5_0 = (RuleCall)cChargeAssignment_5.eContents().get(0);
		private final Keyword cFrictionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFrictionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFrictionEDoubleParserRuleCall_7_0 = (RuleCall)cFrictionAssignment_7.eContents().get(0);
		private final Keyword cRollingFrictionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRollingFrictionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRollingFrictionEDoubleParserRuleCall_9_0 = (RuleCall)cRollingFrictionAssignment_9.eContents().get(0);
		private final Keyword cRestitutionKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cRestitutionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRestitutionEDoubleParserRuleCall_11_0 = (RuleCall)cRestitutionAssignment_11.eContents().get(0);
		private final Keyword cDampingKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cDampingAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cDampingEDoubleParserRuleCall_13_0 = (RuleCall)cDampingAssignment_13.eContents().get(0);
		private final Keyword cAngularDampingKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cAngularDampingAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cAngularDampingEDoubleParserRuleCall_15_0 = (RuleCall)cAngularDampingAssignment_15.eContents().get(0);
		
		//PhysicBody returns Physics::PhysicBody:
		//    'mass' mass=EDouble
		//    'bodyType' bodyType=BodyType
		//    'charge' charge=EDouble
		//    'friction' friction=EDouble
		//    'rollingFriction' rollingFriction=EDouble
		//    'restitution' restitution=EDouble
		//    'damping' damping=EDouble
		//    'angularDamping' angularDamping=EDouble
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mass' mass=EDouble
		//'bodyType' bodyType=BodyType
		//'charge' charge=EDouble
		//'friction' friction=EDouble
		//'rollingFriction' rollingFriction=EDouble
		//'restitution' restitution=EDouble
		//'damping' damping=EDouble
		//'angularDamping' angularDamping=EDouble
		public Group getGroup() { return cGroup; }
		
		//'mass'
		public Keyword getMassKeyword_0() { return cMassKeyword_0; }
		
		//mass=EDouble
		public Assignment getMassAssignment_1() { return cMassAssignment_1; }
		
		//EDouble
		public RuleCall getMassEDoubleParserRuleCall_1_0() { return cMassEDoubleParserRuleCall_1_0; }
		
		//'bodyType'
		public Keyword getBodyTypeKeyword_2() { return cBodyTypeKeyword_2; }
		
		//bodyType=BodyType
		public Assignment getBodyTypeAssignment_3() { return cBodyTypeAssignment_3; }
		
		//BodyType
		public RuleCall getBodyTypeBodyTypeEnumRuleCall_3_0() { return cBodyTypeBodyTypeEnumRuleCall_3_0; }
		
		//'charge'
		public Keyword getChargeKeyword_4() { return cChargeKeyword_4; }
		
		//charge=EDouble
		public Assignment getChargeAssignment_5() { return cChargeAssignment_5; }
		
		//EDouble
		public RuleCall getChargeEDoubleParserRuleCall_5_0() { return cChargeEDoubleParserRuleCall_5_0; }
		
		//'friction'
		public Keyword getFrictionKeyword_6() { return cFrictionKeyword_6; }
		
		//friction=EDouble
		public Assignment getFrictionAssignment_7() { return cFrictionAssignment_7; }
		
		//EDouble
		public RuleCall getFrictionEDoubleParserRuleCall_7_0() { return cFrictionEDoubleParserRuleCall_7_0; }
		
		//'rollingFriction'
		public Keyword getRollingFrictionKeyword_8() { return cRollingFrictionKeyword_8; }
		
		//rollingFriction=EDouble
		public Assignment getRollingFrictionAssignment_9() { return cRollingFrictionAssignment_9; }
		
		//EDouble
		public RuleCall getRollingFrictionEDoubleParserRuleCall_9_0() { return cRollingFrictionEDoubleParserRuleCall_9_0; }
		
		//'restitution'
		public Keyword getRestitutionKeyword_10() { return cRestitutionKeyword_10; }
		
		//restitution=EDouble
		public Assignment getRestitutionAssignment_11() { return cRestitutionAssignment_11; }
		
		//EDouble
		public RuleCall getRestitutionEDoubleParserRuleCall_11_0() { return cRestitutionEDoubleParserRuleCall_11_0; }
		
		//'damping'
		public Keyword getDampingKeyword_12() { return cDampingKeyword_12; }
		
		//damping=EDouble
		public Assignment getDampingAssignment_13() { return cDampingAssignment_13; }
		
		//EDouble
		public RuleCall getDampingEDoubleParserRuleCall_13_0() { return cDampingEDoubleParserRuleCall_13_0; }
		
		//'angularDamping'
		public Keyword getAngularDampingKeyword_14() { return cAngularDampingKeyword_14; }
		
		//angularDamping=EDouble
		public Assignment getAngularDampingAssignment_15() { return cAngularDampingAssignment_15; }
		
		//EDouble
		public RuleCall getAngularDampingEDoubleParserRuleCall_15_0() { return cAngularDampingEDoubleParserRuleCall_15_0; }
	}
	public class ForcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Forces");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGestureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGestureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGestureEStringParserRuleCall_3_0 = (RuleCall)cGestureAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cXVectorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cXVectorEDoubleParserRuleCall_4_1_0 = (RuleCall)cXVectorAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cYVectorAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cYVectorEDoubleParserRuleCall_4_3_0 = (RuleCall)cYVectorAssignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cZVectorAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cZVectorEDoubleParserRuleCall_4_5_0 = (RuleCall)cZVectorAssignment_4_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		
		//Forces returns Physics::Force:
		//    name=EString ':' 'gesture' gesture=EString
		//    ('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' 'gesture' gesture=EString
		//('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'gesture'
		public Keyword getGestureKeyword_2() { return cGestureKeyword_2; }
		
		//gesture=EString
		public Assignment getGestureAssignment_3() { return cGestureAssignment_3; }
		
		//EString
		public RuleCall getGestureEStringParserRuleCall_3_0() { return cGestureEStringParserRuleCall_3_0; }
		
		//('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//xVector=EDouble
		public Assignment getXVectorAssignment_4_1() { return cXVectorAssignment_4_1; }
		
		//EDouble
		public RuleCall getXVectorEDoubleParserRuleCall_4_1_0() { return cXVectorEDoubleParserRuleCall_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//yVector=EDouble
		public Assignment getYVectorAssignment_4_3() { return cYVectorAssignment_4_3; }
		
		//EDouble
		public RuleCall getYVectorEDoubleParserRuleCall_4_3_0() { return cYVectorEDoubleParserRuleCall_4_3_0; }
		
		//','
		public Keyword getCommaKeyword_4_4() { return cCommaKeyword_4_4; }
		
		//zVector=EDouble
		public Assignment getZVectorAssignment_4_5() { return cZVectorAssignment_4_5; }
		
		//EDouble
		public RuleCall getZVectorEDoubleParserRuleCall_4_5_0() { return cZVectorEDoubleParserRuleCall_4_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_6() { return cRightSquareBracketKeyword_4_6; }
	}
	public class BitMasksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.BitMasks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCategoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCategoryEIntParserRuleCall_1_0 = (RuleCall)cCategoryAssignment_1.eContents().get(0);
		private final Keyword cCollisionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollisionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollisionEIntParserRuleCall_3_0 = (RuleCall)cCollisionAssignment_3.eContents().get(0);
		private final Keyword cContactKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContactTestAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContactTestEIntParserRuleCall_5_0 = (RuleCall)cContactTestAssignment_5.eContents().get(0);
		
		//BitMasks returns Physics::BitMasks:
		//    'id' category=EInt
		//    'collision' collision=EInt
		//    'contact' contactTest=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'id' category=EInt
		//'collision' collision=EInt
		//'contact' contactTest=EInt
		public Group getGroup() { return cGroup; }
		
		//'id'
		public Keyword getIdKeyword_0() { return cIdKeyword_0; }
		
		//category=EInt
		public Assignment getCategoryAssignment_1() { return cCategoryAssignment_1; }
		
		//EInt
		public RuleCall getCategoryEIntParserRuleCall_1_0() { return cCategoryEIntParserRuleCall_1_0; }
		
		//'collision'
		public Keyword getCollisionKeyword_2() { return cCollisionKeyword_2; }
		
		//collision=EInt
		public Assignment getCollisionAssignment_3() { return cCollisionAssignment_3; }
		
		//EInt
		public RuleCall getCollisionEIntParserRuleCall_3_0() { return cCollisionEIntParserRuleCall_3_0; }
		
		//'contact'
		public Keyword getContactKeyword_4() { return cContactKeyword_4; }
		
		//contactTest=EInt
		public Assignment getContactTestAssignment_5() { return cContactTestAssignment_5; }
		
		//EInt
		public RuleCall getContactTestEIntParserRuleCall_5_0() { return cContactTestEIntParserRuleCall_5_0; }
	}
	public class GameloopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Gameloop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGamelogicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDisplayKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStartKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartEStringParserRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		private final Keyword cWinKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWinAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWinEStringParserRuleCall_7_0 = (RuleCall)cWinAssignment_7.eContents().get(0);
		private final Keyword cLoseKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cLoseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLoseEStringParserRuleCall_9_0 = (RuleCall)cLoseAssignment_9.eContents().get(0);
		private final Keyword cScoreKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cScoreAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cScoreScoreParserRuleCall_12_0 = (RuleCall)cScoreAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cActionsKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cActionsTriggersAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cActionsTriggersActionsParserRuleCall_14_2_0 = (RuleCall)cActionsTriggersAssignment_14_2.eContents().get(0);
		private final Group cGroup_14_3 = (Group)cGroup_14.eContents().get(3);
		private final Keyword cCommaKeyword_14_3_0 = (Keyword)cGroup_14_3.eContents().get(0);
		private final Assignment cActionsTriggersAssignment_14_3_1 = (Assignment)cGroup_14_3.eContents().get(1);
		private final RuleCall cActionsTriggersActionsParserRuleCall_14_3_1_0 = (RuleCall)cActionsTriggersAssignment_14_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cCollisionsKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cCollisionsAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cCollisionsCollisionsParserRuleCall_15_2_0 = (RuleCall)cCollisionsAssignment_15_2.eContents().get(0);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final Keyword cCommaKeyword_15_3_0 = (Keyword)cGroup_15_3.eContents().get(0);
		private final Assignment cCollisionsAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cCollisionsCollisionsParserRuleCall_15_3_1_0 = (RuleCall)cCollisionsAssignment_15_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cButtonsKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cGamepadAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cGamepadGamePadParserRuleCall_16_2_0 = (RuleCall)cGamepadAssignment_16_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cElementsKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cObjInitAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cObjInitObjInitParserRuleCall_17_2_0 = (RuleCall)cObjInitAssignment_17_2.eContents().get(0);
		private final Group cGroup_17_3 = (Group)cGroup_17.eContents().get(3);
		private final Keyword cCommaKeyword_17_3_0 = (Keyword)cGroup_17_3.eContents().get(0);
		private final Assignment cObjInitAssignment_17_3_1 = (Assignment)cGroup_17_3.eContents().get(1);
		private final RuleCall cObjInitObjInitParserRuleCall_17_3_1_0 = (RuleCall)cObjInitAssignment_17_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_17_4 = (Keyword)cGroup_17.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Gameloop returns Gameloop::Game:
		//    'Gamelogic''{'
		//    'Display'':'
		//    'start' start=EString
		//    'win' win=EString
		//    'lose' lose=EString
		//    'score' '{' score=Score '}'
		//    ('Actions' '{' actionsTriggers+=Actions ( "," actionsTriggers+=Actions)* '}')?
		//    ('Collisions' '{' collisions+=Collisions ( "," collisions+=Collisions)* '}')?
		//    ('Buttons' '{' gamepad+=GamePad '}')?
		//    ('Elements' '{' objInit+=ObjInit ("," objInit+=ObjInit)* '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Gamelogic''{'
		//'Display'':'
		//'start' start=EString
		//'win' win=EString
		//'lose' lose=EString
		//'score' '{' score=Score '}'
		//('Actions' '{' actionsTriggers+=Actions ( "," actionsTriggers+=Actions)* '}')?
		//('Collisions' '{' collisions+=Collisions ( "," collisions+=Collisions)* '}')?
		//('Buttons' '{' gamepad+=GamePad '}')?
		//('Elements' '{' objInit+=ObjInit ("," objInit+=ObjInit)* '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Gamelogic'
		public Keyword getGamelogicKeyword_0() { return cGamelogicKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Display'
		public Keyword getDisplayKeyword_2() { return cDisplayKeyword_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'start'
		public Keyword getStartKeyword_4() { return cStartKeyword_4; }
		
		//start=EString
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }
		
		//EString
		public RuleCall getStartEStringParserRuleCall_5_0() { return cStartEStringParserRuleCall_5_0; }
		
		//'win'
		public Keyword getWinKeyword_6() { return cWinKeyword_6; }
		
		//win=EString
		public Assignment getWinAssignment_7() { return cWinAssignment_7; }
		
		//EString
		public RuleCall getWinEStringParserRuleCall_7_0() { return cWinEStringParserRuleCall_7_0; }
		
		//'lose'
		public Keyword getLoseKeyword_8() { return cLoseKeyword_8; }
		
		//lose=EString
		public Assignment getLoseAssignment_9() { return cLoseAssignment_9; }
		
		//EString
		public RuleCall getLoseEStringParserRuleCall_9_0() { return cLoseEStringParserRuleCall_9_0; }
		
		//'score'
		public Keyword getScoreKeyword_10() { return cScoreKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//score=Score
		public Assignment getScoreAssignment_12() { return cScoreAssignment_12; }
		
		//Score
		public RuleCall getScoreScoreParserRuleCall_12_0() { return cScoreScoreParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//('Actions' '{' actionsTriggers+=Actions ( "," actionsTriggers+=Actions)* '}')?
		public Group getGroup_14() { return cGroup_14; }
		
		//'Actions'
		public Keyword getActionsKeyword_14_0() { return cActionsKeyword_14_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_14_1() { return cLeftCurlyBracketKeyword_14_1; }
		
		//actionsTriggers+=Actions
		public Assignment getActionsTriggersAssignment_14_2() { return cActionsTriggersAssignment_14_2; }
		
		//Actions
		public RuleCall getActionsTriggersActionsParserRuleCall_14_2_0() { return cActionsTriggersActionsParserRuleCall_14_2_0; }
		
		//( "," actionsTriggers+=Actions)*
		public Group getGroup_14_3() { return cGroup_14_3; }
		
		//","
		public Keyword getCommaKeyword_14_3_0() { return cCommaKeyword_14_3_0; }
		
		//actionsTriggers+=Actions
		public Assignment getActionsTriggersAssignment_14_3_1() { return cActionsTriggersAssignment_14_3_1; }
		
		//Actions
		public RuleCall getActionsTriggersActionsParserRuleCall_14_3_1_0() { return cActionsTriggersActionsParserRuleCall_14_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14_4() { return cRightCurlyBracketKeyword_14_4; }
		
		//('Collisions' '{' collisions+=Collisions ( "," collisions+=Collisions)* '}')?
		public Group getGroup_15() { return cGroup_15; }
		
		//'Collisions'
		public Keyword getCollisionsKeyword_15_0() { return cCollisionsKeyword_15_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_15_1() { return cLeftCurlyBracketKeyword_15_1; }
		
		//collisions+=Collisions
		public Assignment getCollisionsAssignment_15_2() { return cCollisionsAssignment_15_2; }
		
		//Collisions
		public RuleCall getCollisionsCollisionsParserRuleCall_15_2_0() { return cCollisionsCollisionsParserRuleCall_15_2_0; }
		
		//( "," collisions+=Collisions)*
		public Group getGroup_15_3() { return cGroup_15_3; }
		
		//","
		public Keyword getCommaKeyword_15_3_0() { return cCommaKeyword_15_3_0; }
		
		//collisions+=Collisions
		public Assignment getCollisionsAssignment_15_3_1() { return cCollisionsAssignment_15_3_1; }
		
		//Collisions
		public RuleCall getCollisionsCollisionsParserRuleCall_15_3_1_0() { return cCollisionsCollisionsParserRuleCall_15_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15_4() { return cRightCurlyBracketKeyword_15_4; }
		
		//('Buttons' '{' gamepad+=GamePad '}')?
		public Group getGroup_16() { return cGroup_16; }
		
		//'Buttons'
		public Keyword getButtonsKeyword_16_0() { return cButtonsKeyword_16_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_16_1() { return cLeftCurlyBracketKeyword_16_1; }
		
		//gamepad+=GamePad
		public Assignment getGamepadAssignment_16_2() { return cGamepadAssignment_16_2; }
		
		//GamePad
		public RuleCall getGamepadGamePadParserRuleCall_16_2_0() { return cGamepadGamePadParserRuleCall_16_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_16_3() { return cRightCurlyBracketKeyword_16_3; }
		
		//('Elements' '{' objInit+=ObjInit ("," objInit+=ObjInit)* '}')?
		public Group getGroup_17() { return cGroup_17; }
		
		//'Elements'
		public Keyword getElementsKeyword_17_0() { return cElementsKeyword_17_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_17_1() { return cLeftCurlyBracketKeyword_17_1; }
		
		//objInit+=ObjInit
		public Assignment getObjInitAssignment_17_2() { return cObjInitAssignment_17_2; }
		
		//ObjInit
		public RuleCall getObjInitObjInitParserRuleCall_17_2_0() { return cObjInitObjInitParserRuleCall_17_2_0; }
		
		//("," objInit+=ObjInit)*
		public Group getGroup_17_3() { return cGroup_17_3; }
		
		//","
		public Keyword getCommaKeyword_17_3_0() { return cCommaKeyword_17_3_0; }
		
		//objInit+=ObjInit
		public Assignment getObjInitAssignment_17_3_1() { return cObjInitAssignment_17_3_1; }
		
		//ObjInit
		public RuleCall getObjInitObjInitParserRuleCall_17_3_1_0() { return cObjInitObjInitParserRuleCall_17_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_17_4() { return cRightCurlyBracketKeyword_17_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }
	}
	public class ScoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Score");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartEIntParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cGoalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFinishAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFinishEIntParserRuleCall_3_0 = (RuleCall)cFinishAssignment_3.eContents().get(0);
		private final Keyword cLivesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLivesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLivesEIntParserRuleCall_5_0 = (RuleCall)cLivesAssignment_5.eContents().get(0);
		
		//Score returns Gameloop::ScoreSystem:
		//    'start' start=EInt
		//    'goal' finish=EInt
		//    'lives' lives=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'start' start=EInt
		//'goal' finish=EInt
		//'lives' lives=EInt
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//start=EInt
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }
		
		//EInt
		public RuleCall getStartEIntParserRuleCall_1_0() { return cStartEIntParserRuleCall_1_0; }
		
		//'goal'
		public Keyword getGoalKeyword_2() { return cGoalKeyword_2; }
		
		//finish=EInt
		public Assignment getFinishAssignment_3() { return cFinishAssignment_3; }
		
		//EInt
		public RuleCall getFinishEIntParserRuleCall_3_0() { return cFinishEIntParserRuleCall_3_0; }
		
		//'lives'
		public Keyword getLivesKeyword_4() { return cLivesKeyword_4; }
		
		//lives=EInt
		public Assignment getLivesAssignment_5() { return cLivesAssignment_5; }
		
		//EInt
		public RuleCall getLivesEIntParserRuleCall_5_0() { return cLivesEIntParserRuleCall_5_0; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Actions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cActionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionBasicActionsEnumRuleCall_2_1_0 = (RuleCall)cActionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDisplayKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMessageAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMessageEStringParserRuleCall_3_1_0 = (RuleCall)cMessageAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScoreKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScoreChangeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScoreChangeEIntParserRuleCall_4_1_0 = (RuleCall)cScoreChangeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTimeEachKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTimeTriggerAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTimeTriggerEIntParserRuleCall_5_1_0 = (RuleCall)cTimeTriggerAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cChangesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cPhysicChangesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cPhysicChangesPhysicChangesParserRuleCall_6_2_0 = (RuleCall)cPhysicChangesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cPhysicChangesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cPhysicChangesPhysicChangesParserRuleCall_6_3_1_0 = (RuleCall)cPhysicChangesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actions returns Gameloop::Trigger:
		//    name=EString '{'
		//    ('action' action=BasicActions)?
		//    ('display' message=EString)?
		//    ('score' scoreChange=EInt)?
		//    ('timeEach' timeTrigger=EInt)?
		//    ('changes' '{' physicChanges+=PhysicChanges (',' physicChanges+=PhysicChanges)* '}' )?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{'
		//('action' action=BasicActions)?
		//('display' message=EString)?
		//('score' scoreChange=EInt)?
		//('timeEach' timeTrigger=EInt)?
		//('changes' '{' physicChanges+=PhysicChanges (',' physicChanges+=PhysicChanges)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('action' action=BasicActions)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'action'
		public Keyword getActionKeyword_2_0() { return cActionKeyword_2_0; }
		
		//action=BasicActions
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//BasicActions
		public RuleCall getActionBasicActionsEnumRuleCall_2_1_0() { return cActionBasicActionsEnumRuleCall_2_1_0; }
		
		//('display' message=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'display'
		public Keyword getDisplayKeyword_3_0() { return cDisplayKeyword_3_0; }
		
		//message=EString
		public Assignment getMessageAssignment_3_1() { return cMessageAssignment_3_1; }
		
		//EString
		public RuleCall getMessageEStringParserRuleCall_3_1_0() { return cMessageEStringParserRuleCall_3_1_0; }
		
		//('score' scoreChange=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'score'
		public Keyword getScoreKeyword_4_0() { return cScoreKeyword_4_0; }
		
		//scoreChange=EInt
		public Assignment getScoreChangeAssignment_4_1() { return cScoreChangeAssignment_4_1; }
		
		//EInt
		public RuleCall getScoreChangeEIntParserRuleCall_4_1_0() { return cScoreChangeEIntParserRuleCall_4_1_0; }
		
		//('timeEach' timeTrigger=EInt)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'timeEach'
		public Keyword getTimeEachKeyword_5_0() { return cTimeEachKeyword_5_0; }
		
		//timeTrigger=EInt
		public Assignment getTimeTriggerAssignment_5_1() { return cTimeTriggerAssignment_5_1; }
		
		//EInt
		public RuleCall getTimeTriggerEIntParserRuleCall_5_1_0() { return cTimeTriggerEIntParserRuleCall_5_1_0; }
		
		//('changes' '{' physicChanges+=PhysicChanges (',' physicChanges+=PhysicChanges)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'changes'
		public Keyword getChangesKeyword_6_0() { return cChangesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//physicChanges+=PhysicChanges
		public Assignment getPhysicChangesAssignment_6_2() { return cPhysicChangesAssignment_6_2; }
		
		//PhysicChanges
		public RuleCall getPhysicChangesPhysicChangesParserRuleCall_6_2_0() { return cPhysicChangesPhysicChangesParserRuleCall_6_2_0; }
		
		//(',' physicChanges+=PhysicChanges)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//physicChanges+=PhysicChanges
		public Assignment getPhysicChangesAssignment_6_3_1() { return cPhysicChangesAssignment_6_3_1; }
		
		//PhysicChanges
		public RuleCall getPhysicChangesPhysicChangesParserRuleCall_6_3_1_0() { return cPhysicChangesPhysicChangesParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CollisionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Collisions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassAClassCrossReference_1_0 = (CrossReference)cClassAAssignment_1.eContents().get(0);
		private final RuleCall cClassAClassEStringParserRuleCall_1_0_1 = (RuleCall)cClassAClassCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassBClassCrossReference_3_0 = (CrossReference)cClassBAssignment_3.eContents().get(0);
		private final RuleCall cClassBClassEStringParserRuleCall_3_0_1 = (RuleCall)cClassBClassCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActionTriggerCrossReference_5_0 = (CrossReference)cActionAssignment_5.eContents().get(0);
		private final RuleCall cActionTriggerEStringParserRuleCall_5_0_1 = (RuleCall)cActionTriggerCrossReference_5_0.eContents().get(1);
		
		//Collisions returns Gameloop::Collision:
		//    'element' classA=[Ontologicals::Class|EString]'to' classB=[Ontologicals::Class|EString] '->' action=[Gameloop::Trigger|EString]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' classA=[Ontologicals::Class|EString]'to' classB=[Ontologicals::Class|EString] '->' action=[Gameloop::Trigger|EString]
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//classA=[Ontologicals::Class|EString]
		public Assignment getClassAAssignment_1() { return cClassAAssignment_1; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getClassAClassCrossReference_1_0() { return cClassAClassCrossReference_1_0; }
		
		//EString
		public RuleCall getClassAClassEStringParserRuleCall_1_0_1() { return cClassAClassEStringParserRuleCall_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//classB=[Ontologicals::Class|EString]
		public Assignment getClassBAssignment_3() { return cClassBAssignment_3; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getClassBClassCrossReference_3_0() { return cClassBClassCrossReference_3_0; }
		
		//EString
		public RuleCall getClassBClassEStringParserRuleCall_3_0_1() { return cClassBClassEStringParserRuleCall_3_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//action=[Gameloop::Trigger|EString]
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//[Gameloop::Trigger|EString]
		public CrossReference getActionTriggerCrossReference_5_0() { return cActionTriggerCrossReference_5_0; }
		
		//EString
		public RuleCall getActionTriggerEStringParserRuleCall_5_0_1() { return cActionTriggerEStringParserRuleCall_5_0_1; }
	}
	public class PhysicChangesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.PhysicChanges");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionEnumRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClassClassCrossReference_3_0 = (CrossReference)cClassAssignment_3.eContents().get(0);
		private final RuleCall cClassClassEStringParserRuleCall_3_0_1 = (RuleCall)cClassClassCrossReference_3_0.eContents().get(1);
		private final Keyword cNamedKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectEStringParserRuleCall_5_0 = (RuleCall)cObjectAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPositionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPositionPositionEnumRuleCall_6_1_0 = (RuleCall)cPositionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cScaleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cScaleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cScaleEDoubleParserRuleCall_7_1_0 = (RuleCall)cScaleAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cStatKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAttributeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAttributeEStringParserRuleCall_8_1_0 = (RuleCall)cAttributeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cChangeStatKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cChangeValueAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cChangeValueEIntParserRuleCall_9_1_0 = (RuleCall)cChangeValueAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cForceKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cForceAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cForceForceCrossReference_10_1_0 = (CrossReference)cForceAssignment_10_1.eContents().get(0);
		private final RuleCall cForceForceEStringParserRuleCall_10_1_0_1 = (RuleCall)cForceForceCrossReference_10_1_0.eContents().get(1);
		
		//PhysicChanges returns Gameloop::PhysicChange:
		//    'do' action=Action
		//    'in' class=[Ontologicals::Class|EString]
		//    'named' object=EString
		//    ('where' position=Position)?
		//    ('scale' scale=EDouble)?
		//    ('stat' attribute=EString)?
		//    ('changeStat' changeValue=EInt)?
		//    ('force' force=[Physics::Force|EString])?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' action=Action
		//'in' class=[Ontologicals::Class|EString]
		//'named' object=EString
		//('where' position=Position)?
		//('scale' scale=EDouble)?
		//('stat' attribute=EString)?
		//('changeStat' changeValue=EInt)?
		//('force' force=[Physics::Force|EString])?
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//action=Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_1_0() { return cActionActionEnumRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//class=[Ontologicals::Class|EString]
		public Assignment getClassAssignment_3() { return cClassAssignment_3; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getClassClassCrossReference_3_0() { return cClassClassCrossReference_3_0; }
		
		//EString
		public RuleCall getClassClassEStringParserRuleCall_3_0_1() { return cClassClassEStringParserRuleCall_3_0_1; }
		
		//'named'
		public Keyword getNamedKeyword_4() { return cNamedKeyword_4; }
		
		//object=EString
		public Assignment getObjectAssignment_5() { return cObjectAssignment_5; }
		
		//EString
		public RuleCall getObjectEStringParserRuleCall_5_0() { return cObjectEStringParserRuleCall_5_0; }
		
		//('where' position=Position)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'where'
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }
		
		//position=Position
		public Assignment getPositionAssignment_6_1() { return cPositionAssignment_6_1; }
		
		//Position
		public RuleCall getPositionPositionEnumRuleCall_6_1_0() { return cPositionPositionEnumRuleCall_6_1_0; }
		
		//('scale' scale=EDouble)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'scale'
		public Keyword getScaleKeyword_7_0() { return cScaleKeyword_7_0; }
		
		//scale=EDouble
		public Assignment getScaleAssignment_7_1() { return cScaleAssignment_7_1; }
		
		//EDouble
		public RuleCall getScaleEDoubleParserRuleCall_7_1_0() { return cScaleEDoubleParserRuleCall_7_1_0; }
		
		//('stat' attribute=EString)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'stat'
		public Keyword getStatKeyword_8_0() { return cStatKeyword_8_0; }
		
		//attribute=EString
		public Assignment getAttributeAssignment_8_1() { return cAttributeAssignment_8_1; }
		
		//EString
		public RuleCall getAttributeEStringParserRuleCall_8_1_0() { return cAttributeEStringParserRuleCall_8_1_0; }
		
		//('changeStat' changeValue=EInt)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'changeStat'
		public Keyword getChangeStatKeyword_9_0() { return cChangeStatKeyword_9_0; }
		
		//changeValue=EInt
		public Assignment getChangeValueAssignment_9_1() { return cChangeValueAssignment_9_1; }
		
		//EInt
		public RuleCall getChangeValueEIntParserRuleCall_9_1_0() { return cChangeValueEIntParserRuleCall_9_1_0; }
		
		//('force' force=[Physics::Force|EString])?
		public Group getGroup_10() { return cGroup_10; }
		
		//'force'
		public Keyword getForceKeyword_10_0() { return cForceKeyword_10_0; }
		
		//force=[Physics::Force|EString]
		public Assignment getForceAssignment_10_1() { return cForceAssignment_10_1; }
		
		//[Physics::Force|EString]
		public CrossReference getForceForceCrossReference_10_1_0() { return cForceForceCrossReference_10_1_0; }
		
		//EString
		public RuleCall getForceForceEStringParserRuleCall_10_1_0_1() { return cForceForceEStringParserRuleCall_10_1_0_1; }
	}
	public class GamePadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.GamePad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTriggerTriggerCrossReference_2_0 = (CrossReference)cTriggerAssignment_2.eContents().get(0);
		private final RuleCall cTriggerTriggerEStringParserRuleCall_2_0_1 = (RuleCall)cTriggerTriggerCrossReference_2_0.eContents().get(1);
		
		//GamePad returns Gameloop::GamePad:
		//    name=EString '->' trigger=[Gameloop::Trigger|EString]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '->' trigger=[Gameloop::Trigger|EString]
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//trigger=[Gameloop::Trigger|EString]
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }
		
		//[Gameloop::Trigger|EString]
		public CrossReference getTriggerTriggerCrossReference_2_0() { return cTriggerTriggerCrossReference_2_0; }
		
		//EString
		public RuleCall getTriggerTriggerEStringParserRuleCall_2_0_1() { return cTriggerTriggerEStringParserRuleCall_2_0_1; }
	}
	public class ObjInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.ObjInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassClassCrossReference_1_0 = (CrossReference)cClassAssignment_1.eContents().get(0);
		private final RuleCall cClassClassEStringParserRuleCall_1_0_1 = (RuleCall)cClassClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPosXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPosXEDoubleParserRuleCall_3_0 = (RuleCall)cPosXAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPosYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPosYEDoubleParserRuleCall_5_0 = (RuleCall)cPosYAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPosZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPosZEDoubleParserRuleCall_7_0 = (RuleCall)cPosZAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cRulesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cRulesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_9_2_0 = (RuleCall)cRulesAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cRulesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_9_3_1_0 = (RuleCall)cRulesAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//ObjInit returns Gameloop::ObjInit:
		//    name=EString class=[Ontologicals::Class|EString] '[' posX=EDouble ',' posY=EDouble ',' posZ=EDouble ']'
		//    ('rules' '{' rules+=Rule (',' rules+=Rule)* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString class=[Ontologicals::Class|EString] '[' posX=EDouble ',' posY=EDouble ',' posZ=EDouble ']'
		//('rules' '{' rules+=Rule (',' rules+=Rule)* '}')?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//class=[Ontologicals::Class|EString]
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }
		
		//[Ontologicals::Class|EString]
		public CrossReference getClassClassCrossReference_1_0() { return cClassClassCrossReference_1_0; }
		
		//EString
		public RuleCall getClassClassEStringParserRuleCall_1_0_1() { return cClassClassEStringParserRuleCall_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//posX=EDouble
		public Assignment getPosXAssignment_3() { return cPosXAssignment_3; }
		
		//EDouble
		public RuleCall getPosXEDoubleParserRuleCall_3_0() { return cPosXEDoubleParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//posY=EDouble
		public Assignment getPosYAssignment_5() { return cPosYAssignment_5; }
		
		//EDouble
		public RuleCall getPosYEDoubleParserRuleCall_5_0() { return cPosYEDoubleParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//posZ=EDouble
		public Assignment getPosZAssignment_7() { return cPosZAssignment_7; }
		
		//EDouble
		public RuleCall getPosZEDoubleParserRuleCall_7_0() { return cPosZEDoubleParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//('rules' '{' rules+=Rule (',' rules+=Rule)* '}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'rules'
		public Keyword getRulesKeyword_9_0() { return cRulesKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_9_2() { return cRulesAssignment_9_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_9_2_0() { return cRulesRuleParserRuleCall_9_2_0; }
		
		//(',' rules+=Rule)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//','
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_9_3_1() { return cRulesAssignment_9_3_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_9_3_1_0() { return cRulesRuleParserRuleCall_9_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActionTriggerCrossReference_1_0 = (CrossReference)cActionAssignment_1.eContents().get(0);
		private final RuleCall cActionTriggerEStringParserRuleCall_1_0_1 = (RuleCall)cActionTriggerCrossReference_1_0.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rule returns Gameloop::Rule:
		//    'do' action=[Gameloop::Trigger|EString] 'if(' condition=Condition ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' action=[Gameloop::Trigger|EString] 'if(' condition=Condition ')'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//action=[Gameloop::Trigger|EString]
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//[Gameloop::Trigger|EString]
		public CrossReference getActionTriggerCrossReference_1_0() { return cActionTriggerCrossReference_1_0; }
		
		//EString
		public RuleCall getActionTriggerEStringParserRuleCall_1_0_1() { return cActionTriggerEStringParserRuleCall_1_0_1; }
		
		//'if('
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition returns Gameloop::Condition:
		//    LogicOp|Arithmetic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicOp|Arithmetic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicOp
		public RuleCall getLogicOpParserRuleCall_0() { return cLogicOpParserRuleCall_0; }
		
		//Arithmetic
		public RuleCall getArithmeticParserRuleCall_1() { return cArithmeticParserRuleCall_1; }
	}
	public class LogicOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.LogicOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LogicOp returns Gameloop::LogicOp:
		//    Not|Binary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Not|Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_1() { return cBinaryParserRuleCall_1; }
	}
	public class ArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Arithmetic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftValueParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpArithmOpsEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Arithmetic returns Gameloop::Arithmetic:
		//    left=Value op=ArithmOps right=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Value op=ArithmOps right=Value
		public Group getGroup() { return cGroup; }
		
		//left=Value
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Value
		public RuleCall getLeftValueParserRuleCall_0_0() { return cLeftValueParserRuleCall_0_0; }
		
		//op=ArithmOps
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//ArithmOps
		public RuleCall getOpArithmOpsEnumRuleCall_1_0() { return cOpArithmOpsEnumRuleCall_1_0; }
		
		//right=Value
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_2_0() { return cRightValueParserRuleCall_2_0; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftConditionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		
		//Not returns Gameloop::Not:
		//    '!' left=Condition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' left=Condition
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//left=Condition
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Condition
		public RuleCall getLeftConditionParserRuleCall_1_0() { return cLeftConditionParserRuleCall_1_0; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftConditionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpLogicOpsEnumRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightConditionParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Binary returns Gameloop::Binary:
		//    '(' left=Condition ')' op=LogicOps '(' right=Condition ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Condition ')' op=LogicOps '(' right=Condition ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Condition
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Condition
		public RuleCall getLeftConditionParserRuleCall_1_0() { return cLeftConditionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//op=LogicOps
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//LogicOps
		public RuleCall getOpLogicOpsEnumRuleCall_3_0() { return cOpLogicOpsEnumRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//right=Condition
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//Condition
		public RuleCall getRightConditionParserRuleCall_5_0() { return cRightConditionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAllInstancesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value returns Gameloop::Value:
		//    AttributeValue|ConstantValue|AllInstances
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeValue|ConstantValue|AllInstances
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeValue
		public RuleCall getAttributeValueParserRuleCall_0() { return cAttributeValueParserRuleCall_0; }
		
		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_1() { return cConstantValueParserRuleCall_1; }
		
		//AllInstances
		public RuleCall getAllInstancesParserRuleCall_2() { return cAllInstancesParserRuleCall_2; }
	}
	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.AttributeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassEStringParserRuleCall_0_0 = (RuleCall)cClassAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeEStringParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//AttributeValue returns Gameloop::AttributeValue:
		//    class=EString '.' attribute=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//class=EString '.' attribute=EString
		public Group getGroup() { return cGroup; }
		
		//class=EString
		public Assignment getClassAssignment_0() { return cClassAssignment_0; }
		
		//EString
		public RuleCall getClassEStringParserRuleCall_0_0() { return cClassEStringParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=EString
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//EString
		public RuleCall getAttributeEStringParserRuleCall_2_0() { return cAttributeEStringParserRuleCall_2_0; }
	}
	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue returns Gameloop::ConstantValue:
		//    value=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class AllInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.AllInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AllInstances returns Gameloop::AllInstances:
		//    "All" type=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"All" type=EString
		public Group getGroup() { return cGroup; }
		
		//"All"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//type=EString
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_1_0() { return cTypeEStringParserRuleCall_1_0; }
	}
	
	public class BasicActionsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.BasicActions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartStartKeyword_0_0 = (Keyword)cStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLoseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLoseLoseKeyword_1_0 = (Keyword)cLoseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWinEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWinWinKeyword_2_0 = (Keyword)cWinEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BasicActions returns Gameloop::BasicActions:
		//    start="start" | lose="lose"| win="win"
		//;
		public EnumRule getRule() { return rule; }
		
		//start="start" | lose="lose"| win="win"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//start="start"
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_0() { return cStartEnumLiteralDeclaration_0; }
		
		//"start"
		public Keyword getStartStartKeyword_0_0() { return cStartStartKeyword_0_0; }
		
		//lose="lose"
		public EnumLiteralDeclaration getLoseEnumLiteralDeclaration_1() { return cLoseEnumLiteralDeclaration_1; }
		
		//"lose"
		public Keyword getLoseLoseKeyword_1_0() { return cLoseLoseKeyword_1_0; }
		
		//win="win"
		public EnumLiteralDeclaration getWinEnumLiteralDeclaration_2() { return cWinEnumLiteralDeclaration_2; }
		
		//"win"
		public Keyword getWinWinKeyword_2_0() { return cWinWinKeyword_2_0; }
	}
	public class PlanesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Planes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnyAnyKeyword_0_0 = (Keyword)cAnyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_0 = (Keyword)cHorizontalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVerticalVerticalKeyword_2_0 = (Keyword)cVerticalEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Planes returns Graphics::Planes:
		//    any='any'|horizontal='horizontal'|vertical='vertical'
		//;
		public EnumRule getRule() { return rule; }
		
		//any='any'|horizontal='horizontal'|vertical='vertical'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//any='any'
		public EnumLiteralDeclaration getAnyEnumLiteralDeclaration_0() { return cAnyEnumLiteralDeclaration_0; }
		
		//'any'
		public Keyword getAnyAnyKeyword_0_0() { return cAnyAnyKeyword_0_0; }
		
		//horizontal='horizontal'
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_1() { return cHorizontalEnumLiteralDeclaration_1; }
		
		//'horizontal'
		public Keyword getHorizontalHorizontalKeyword_1_0() { return cHorizontalHorizontalKeyword_1_0; }
		
		//vertical='vertical'
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_2() { return cVerticalEnumLiteralDeclaration_2; }
		
		//'vertical'
		public Keyword getVerticalVerticalKeyword_2_0() { return cVerticalVerticalKeyword_2_0; }
	}
	public class BodyTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.BodyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStaticEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDynamicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDynamicDynamicKeyword_1_0 = (Keyword)cDynamicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cKinematicEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cKinematicKinematicKeyword_2_0 = (Keyword)cKinematicEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BodyType returns Physics::BodyType:
		//    static='static'|dynamic='dynamic'|kinematic='kinematic'
		//;
		public EnumRule getRule() { return rule; }
		
		//static='static'|dynamic='dynamic'|kinematic='kinematic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//static='static'
		public EnumLiteralDeclaration getStaticEnumLiteralDeclaration_0() { return cStaticEnumLiteralDeclaration_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//dynamic='dynamic'
		public EnumLiteralDeclaration getDynamicEnumLiteralDeclaration_1() { return cDynamicEnumLiteralDeclaration_1; }
		
		//'dynamic'
		public Keyword getDynamicDynamicKeyword_1_0() { return cDynamicDynamicKeyword_1_0; }
		
		//kinematic='kinematic'
		public EnumLiteralDeclaration getKinematicEnumLiteralDeclaration_2() { return cKinematicEnumLiteralDeclaration_2; }
		
		//'kinematic'
		public Keyword getKinematicKinematicKeyword_2_0() { return cKinematicKinematicKeyword_2_0; }
	}
	public class ActionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCreateCreateKeyword_0_0 = (Keyword)cCreateEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEditEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEditEditKeyword_1_0 = (Keyword)cEditEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDeleteDeleteKeyword_2_0 = (Keyword)cDeleteEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Action returns Gameloop::Action:
		//    create='create'|edit='edit'|delete='delete'
		//;
		public EnumRule getRule() { return rule; }
		
		//create='create'|edit='edit'|delete='delete'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//create='create'
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_0() { return cCreateEnumLiteralDeclaration_0; }
		
		//'create'
		public Keyword getCreateCreateKeyword_0_0() { return cCreateCreateKeyword_0_0; }
		
		//edit='edit'
		public EnumLiteralDeclaration getEditEnumLiteralDeclaration_1() { return cEditEnumLiteralDeclaration_1; }
		
		//'edit'
		public Keyword getEditEditKeyword_1_0() { return cEditEditKeyword_1_0; }
		
		//delete='delete'
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_2() { return cDeleteEnumLiteralDeclaration_2; }
		
		//'delete'
		public Keyword getDeleteDeleteKeyword_2_0() { return cDeleteDeleteKeyword_2_0; }
	}
	public class PositionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.Position");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFrontEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFrontFrontKeyword_0_0 = (Keyword)cFrontEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBackEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBackBackKeyword_2_0 = (Keyword)cBackEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Position returns Gameloop::Position:
		//    front='front'|default='default'|back='back'
		//;
		public EnumRule getRule() { return rule; }
		
		//front='front'|default='default'|back='back'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//front='front'
		public EnumLiteralDeclaration getFrontEnumLiteralDeclaration_0() { return cFrontEnumLiteralDeclaration_0; }
		
		//'front'
		public Keyword getFrontFrontKeyword_0_0() { return cFrontFrontKeyword_0_0; }
		
		//default='default'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_1() { return cDefaultEnumLiteralDeclaration_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }
		
		//back='back'
		public EnumLiteralDeclaration getBackEnumLiteralDeclaration_2() { return cBackEnumLiteralDeclaration_2; }
		
		//'back'
		public Keyword getBackBackKeyword_2_0() { return cBackBackKeyword_2_0; }
	}
	public class LogicOpsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.LogicOps");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOps returns Gameloop::LogicOps:
		//    And='&' | Or='|'
		//;
		public EnumRule getRule() { return rule; }
		
		//And='&' | Or='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//And='&'
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getAndAmpersandKeyword_0_0() { return cAndAmpersandKeyword_0_0; }
		
		//Or='|'
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getOrVerticalLineKeyword_1_0() { return cOrVerticalLineKeyword_1_0; }
	}
	public class ArithmOpsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ardsl.Ardsl.ArithmOps");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterGreaterThanSignKeyword_1_0 = (Keyword)cGreaterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowerLessThanSignKeyword_3_0 = (Keyword)cLowerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLowerEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLowerEqualLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLowerEqualEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ArithmOps returns Gameloop::ArithmOps:
		//    equal='=' | greater='>' | greaterEqual='>=' | lower='<' | lowerEqual='<='
		//;
		public EnumRule getRule() { return rule; }
		
		//equal='=' | greater='>' | greaterEqual='>=' | lower='<' | lowerEqual='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//greater='>'
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_1() { return cGreaterEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGreaterGreaterThanSignKeyword_1_0() { return cGreaterGreaterThanSignKeyword_1_0; }
		
		//greaterEqual='>='
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_2() { return cGreaterEqualEnumLiteralDeclaration_2; }
		
		//'>='
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_2_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_2_0; }
		
		//lower='<'
		public EnumLiteralDeclaration getLowerEnumLiteralDeclaration_3() { return cLowerEnumLiteralDeclaration_3; }
		
		//'<'
		public Keyword getLowerLessThanSignKeyword_3_0() { return cLowerLessThanSignKeyword_3_0; }
		
		//lowerEqual='<='
		public EnumLiteralDeclaration getLowerEqualEnumLiteralDeclaration_4() { return cLowerEqualEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLowerEqualLessThanSignEqualsSignKeyword_4_0() { return cLowerEqualLessThanSignEqualsSignKeyword_4_0; }
	}
	
	private final OntologicalElements pOntological;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final ReferenceElements pReference;
	private final GraphicElements pGraphic;
	private final GraphicClassElements pGraphicClass;
	private final VersionsElements pVersions;
	private final VersionNameElements pVersionName;
	private final ConstraintsElements pConstraints;
	private final PhysicsElements pPhysics;
	private final PhysicClassElements pPhysicClass;
	private final PhysicBodyElements pPhysicBody;
	private final ForcesElements pForces;
	private final BitMasksElements pBitMasks;
	private final GameloopElements pGameloop;
	private final ScoreElements pScore;
	private final ActionsElements pActions;
	private final BasicActionsElements eBasicActions;
	private final CollisionsElements pCollisions;
	private final PhysicChangesElements pPhysicChanges;
	private final GamePadElements pGamePad;
	private final ObjInitElements pObjInit;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final LogicOpElements pLogicOp;
	private final ArithmeticElements pArithmetic;
	private final NotElements pNot;
	private final BinaryElements pBinary;
	private final ValueElements pValue;
	private final AttributeValueElements pAttributeValue;
	private final ConstantValueElements pConstantValue;
	private final AllInstancesElements pAllInstances;
	private final PlanesElements ePlanes;
	private final BodyTypeElements eBodyType;
	private final ActionElements eAction;
	private final PositionElements ePosition;
	private final LogicOpsElements eLogicOps;
	private final ArithmOpsElements eArithmOps;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOntological = new OntologicalElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pReference = new ReferenceElements();
		this.pGraphic = new GraphicElements();
		this.pGraphicClass = new GraphicClassElements();
		this.pVersions = new VersionsElements();
		this.pVersionName = new VersionNameElements();
		this.pConstraints = new ConstraintsElements();
		this.pPhysics = new PhysicsElements();
		this.pPhysicClass = new PhysicClassElements();
		this.pPhysicBody = new PhysicBodyElements();
		this.pForces = new ForcesElements();
		this.pBitMasks = new BitMasksElements();
		this.pGameloop = new GameloopElements();
		this.pScore = new ScoreElements();
		this.pActions = new ActionsElements();
		this.eBasicActions = new BasicActionsElements();
		this.pCollisions = new CollisionsElements();
		this.pPhysicChanges = new PhysicChangesElements();
		this.pGamePad = new GamePadElements();
		this.pObjInit = new ObjInitElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pLogicOp = new LogicOpElements();
		this.pArithmetic = new ArithmeticElements();
		this.pNot = new NotElements();
		this.pBinary = new BinaryElements();
		this.pValue = new ValueElements();
		this.pAttributeValue = new AttributeValueElements();
		this.pConstantValue = new ConstantValueElements();
		this.pAllInstances = new AllInstancesElements();
		this.ePlanes = new PlanesElements();
		this.eBodyType = new BodyTypeElements();
		this.eAction = new ActionElements();
		this.ePosition = new PositionElements();
		this.eLogicOps = new LogicOpsElements();
		this.eArithmOps = new ArithmOpsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ardsl.Ardsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////preguntar a lissete sobre wizards
	//Ontological returns Ontologicals::Ontological:
	//    'Game'
	//    name=EString
	//    '{'
	//        ('URI' URI=EString)?
	//        'elements' '{' classes+=Class ( "," classes+=Class)* '}'
	//    '}'
	//    graphic=Graphic
	//    physic=Physics
	//    gameloop=Gameloop
	//    ;
	public OntologicalElements getOntologicalAccess() {
		return pOntological;
	}
	
	public ParserRule getOntologicalRule() {
		return getOntologicalAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT
	//;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Class returns Ontologicals::Class:
	//    name=EString
	//    '{'
	//        (attributes+=Attribute ( "," attributes+=Attribute)*)?
	//        ('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
	//    '}'
	//    (abstract?='abstract')?
	//    (noSCN?='invisible')?;
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Attribute returns Ontologicals::Attribute:
	//    name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
	//    (isParam?='isParam')?
	//    (isKey?='isKey')?
	//    (readOnly?='readOnly')?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Reference returns Ontologicals::Reference:
	//    name=EString
	//        ('containtment' containtment=EString)?
	//        'min' min=EString
	//        'max' max=EString
	//        'target' target=EString
	//        ('opposite' opposite=EString)?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Graphic returns Graphics::Graphic:
	//    'Graphic''{'
	//    classes+=GraphicClass
	//    '}'
	//;
	public GraphicElements getGraphicAccess() {
		return pGraphic;
	}
	
	public ParserRule getGraphicRule() {
		return getGraphicAccess().getRule();
	}
	
	//GraphicClass returns Graphics::GraphicClass:
	//    'element' ontoClass=[Ontologicals::Class|EString]
	//    'versions' '{' versions=Versions '}'
	//    'versionsName' '{' vname=VersionName '}'
	//    'constraints' '{' constraints=Constraints '}'
	//;
	public GraphicClassElements getGraphicClassAccess() {
		return pGraphicClass;
	}
	
	public ParserRule getGraphicClassRule() {
		return getGraphicClassAccess().getRule();
	}
	
	//Versions returns Graphics::Versions:
	//    'v1' '->' v1=EString
	//    'v2' '->' v2=EString
	//    'v3' '->' v3=EString
	//;
	public VersionsElements getVersionsAccess() {
		return pVersions;
	}
	
	public ParserRule getVersionsRule() {
		return getVersionsAccess().getRule();
	}
	
	//VersionName returns Graphics::VersionName:
	//    'v1' '->' v1=EString
	//    'v2' '->' v2=EString
	//    'v3' '->' v3=EString
	//;
	public VersionNameElements getVersionNameAccess() {
		return pVersionName;
	}
	
	public ParserRule getVersionNameRule() {
		return getVersionNameAccess().getRule();
	}
	
	//Constraints returns Graphics::Constraints:
	//    'plane' planes=Planes
	//    overlapping?='overlaps'
	//    'sizeMin' sizeMin=EDouble
	//    'sizeMax' sizeMax=EDouble
	//    'xVariation' xToOriginPos=EDouble
	//    'yVariation' yToOriginPos=EDouble
	//    'zVariation' zToOriginPos=EDouble
	//    'rotation' rotation=EInt
	//;
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//Physics returns Physics::Physic:
	//    'Physics''{'
	//    classes+=PhysicClass
	//    '}'
	//;
	public PhysicsElements getPhysicsAccess() {
		return pPhysics;
	}
	
	public ParserRule getPhysicsRule() {
		return getPhysicsAccess().getRule();
	}
	
	//PhysicClass returns Physics::PhysicClass:
	//    'element' ontoClass=[Ontologicals::Class|EString]
	//    'body' '{' physicBody=PhysicBody '}'
	//    ('forces' '{' forces+=Forces ( "," forces+=Forces)* '}')?
	//    'contacts' '{' bitMasks=BitMasks '}'
	//;
	public PhysicClassElements getPhysicClassAccess() {
		return pPhysicClass;
	}
	
	public ParserRule getPhysicClassRule() {
		return getPhysicClassAccess().getRule();
	}
	
	//PhysicBody returns Physics::PhysicBody:
	//    'mass' mass=EDouble
	//    'bodyType' bodyType=BodyType
	//    'charge' charge=EDouble
	//    'friction' friction=EDouble
	//    'rollingFriction' rollingFriction=EDouble
	//    'restitution' restitution=EDouble
	//    'damping' damping=EDouble
	//    'angularDamping' angularDamping=EDouble
	//;
	public PhysicBodyElements getPhysicBodyAccess() {
		return pPhysicBody;
	}
	
	public ParserRule getPhysicBodyRule() {
		return getPhysicBodyAccess().getRule();
	}
	
	//Forces returns Physics::Force:
	//    name=EString ':' 'gesture' gesture=EString
	//    ('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
	//;
	public ForcesElements getForcesAccess() {
		return pForces;
	}
	
	public ParserRule getForcesRule() {
		return getForcesAccess().getRule();
	}
	
	//BitMasks returns Physics::BitMasks:
	//    'id' category=EInt
	//    'collision' collision=EInt
	//    'contact' contactTest=EInt
	//;
	public BitMasksElements getBitMasksAccess() {
		return pBitMasks;
	}
	
	public ParserRule getBitMasksRule() {
		return getBitMasksAccess().getRule();
	}
	
	//Gameloop returns Gameloop::Game:
	//    'Gamelogic''{'
	//    'Display'':'
	//    'start' start=EString
	//    'win' win=EString
	//    'lose' lose=EString
	//    'score' '{' score=Score '}'
	//    ('Actions' '{' actionsTriggers+=Actions ( "," actionsTriggers+=Actions)* '}')?
	//    ('Collisions' '{' collisions+=Collisions ( "," collisions+=Collisions)* '}')?
	//    ('Buttons' '{' gamepad+=GamePad '}')?
	//    ('Elements' '{' objInit+=ObjInit ("," objInit+=ObjInit)* '}')?
	//    '}'
	//;
	public GameloopElements getGameloopAccess() {
		return pGameloop;
	}
	
	public ParserRule getGameloopRule() {
		return getGameloopAccess().getRule();
	}
	
	//Score returns Gameloop::ScoreSystem:
	//    'start' start=EInt
	//    'goal' finish=EInt
	//    'lives' lives=EInt
	//;
	public ScoreElements getScoreAccess() {
		return pScore;
	}
	
	public ParserRule getScoreRule() {
		return getScoreAccess().getRule();
	}
	
	//Actions returns Gameloop::Trigger:
	//    name=EString '{'
	//    ('action' action=BasicActions)?
	//    ('display' message=EString)?
	//    ('score' scoreChange=EInt)?
	//    ('timeEach' timeTrigger=EInt)?
	//    ('changes' '{' physicChanges+=PhysicChanges (',' physicChanges+=PhysicChanges)* '}' )?
	//    '}'
	//;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//enum BasicActions returns Gameloop::BasicActions:
	//    start="start" | lose="lose"| win="win"
	//;
	public BasicActionsElements getBasicActionsAccess() {
		return eBasicActions;
	}
	
	public EnumRule getBasicActionsRule() {
		return getBasicActionsAccess().getRule();
	}
	
	//Collisions returns Gameloop::Collision:
	//    'element' classA=[Ontologicals::Class|EString]'to' classB=[Ontologicals::Class|EString] '->' action=[Gameloop::Trigger|EString]
	//;
	public CollisionsElements getCollisionsAccess() {
		return pCollisions;
	}
	
	public ParserRule getCollisionsRule() {
		return getCollisionsAccess().getRule();
	}
	
	//PhysicChanges returns Gameloop::PhysicChange:
	//    'do' action=Action
	//    'in' class=[Ontologicals::Class|EString]
	//    'named' object=EString
	//    ('where' position=Position)?
	//    ('scale' scale=EDouble)?
	//    ('stat' attribute=EString)?
	//    ('changeStat' changeValue=EInt)?
	//    ('force' force=[Physics::Force|EString])?
	//;
	public PhysicChangesElements getPhysicChangesAccess() {
		return pPhysicChanges;
	}
	
	public ParserRule getPhysicChangesRule() {
		return getPhysicChangesAccess().getRule();
	}
	
	//GamePad returns Gameloop::GamePad:
	//    name=EString '->' trigger=[Gameloop::Trigger|EString]
	//;
	public GamePadElements getGamePadAccess() {
		return pGamePad;
	}
	
	public ParserRule getGamePadRule() {
		return getGamePadAccess().getRule();
	}
	
	//ObjInit returns Gameloop::ObjInit:
	//    name=EString class=[Ontologicals::Class|EString] '[' posX=EDouble ',' posY=EDouble ',' posZ=EDouble ']'
	//    ('rules' '{' rules+=Rule (',' rules+=Rule)* '}')?
	//;
	public ObjInitElements getObjInitAccess() {
		return pObjInit;
	}
	
	public ParserRule getObjInitRule() {
		return getObjInitAccess().getRule();
	}
	
	//Rule returns Gameloop::Rule:
	//    'do' action=[Gameloop::Trigger|EString] 'if(' condition=Condition ')'
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition returns Gameloop::Condition:
	//    LogicOp|Arithmetic
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//LogicOp returns Gameloop::LogicOp:
	//    Not|Binary
	//;
	public LogicOpElements getLogicOpAccess() {
		return pLogicOp;
	}
	
	public ParserRule getLogicOpRule() {
		return getLogicOpAccess().getRule();
	}
	
	//Arithmetic returns Gameloop::Arithmetic:
	//    left=Value op=ArithmOps right=Value
	//;
	public ArithmeticElements getArithmeticAccess() {
		return pArithmetic;
	}
	
	public ParserRule getArithmeticRule() {
		return getArithmeticAccess().getRule();
	}
	
	//Not returns Gameloop::Not:
	//    '!' left=Condition
	//;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Binary returns Gameloop::Binary:
	//    '(' left=Condition ')' op=LogicOps '(' right=Condition ')'
	//;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//Value returns Gameloop::Value:
	//    AttributeValue|ConstantValue|AllInstances
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//AttributeValue returns Gameloop::AttributeValue:
	//    class=EString '.' attribute=EString
	//;
	public AttributeValueElements getAttributeValueAccess() {
		return pAttributeValue;
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}
	
	//ConstantValue returns Gameloop::ConstantValue:
	//    value=EString
	//;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}
	
	//AllInstances returns Gameloop::AllInstances:
	//    "All" type=EString
	//;
	public AllInstancesElements getAllInstancesAccess() {
		return pAllInstances;
	}
	
	public ParserRule getAllInstancesRule() {
		return getAllInstancesAccess().getRule();
	}
	
	//enum Planes returns Graphics::Planes:
	//    any='any'|horizontal='horizontal'|vertical='vertical'
	//;
	public PlanesElements getPlanesAccess() {
		return ePlanes;
	}
	
	public EnumRule getPlanesRule() {
		return getPlanesAccess().getRule();
	}
	
	//enum BodyType returns Physics::BodyType:
	//    static='static'|dynamic='dynamic'|kinematic='kinematic'
	//;
	public BodyTypeElements getBodyTypeAccess() {
		return eBodyType;
	}
	
	public EnumRule getBodyTypeRule() {
		return getBodyTypeAccess().getRule();
	}
	
	//enum Action returns Gameloop::Action:
	//    create='create'|edit='edit'|delete='delete'
	//;
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum Position returns Gameloop::Position:
	//    front='front'|default='default'|back='back'
	//;
	public PositionElements getPositionAccess() {
		return ePosition;
	}
	
	public EnumRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//enum LogicOps returns Gameloop::LogicOps:
	//    And='&' | Or='|'
	//;
	public LogicOpsElements getLogicOpsAccess() {
		return eLogicOps;
	}
	
	public EnumRule getLogicOpsRule() {
		return getLogicOpsAccess().getRule();
	}
	
	//enum ArithmOps returns Gameloop::ArithmOps:
	//    equal='=' | greater='>' | greaterEqual='>=' | lower='<' | lowerEqual='<='
	//;
	public ArithmOpsElements getArithmOpsAccess() {
		return eArithmOps;
	}
	
	public EnumRule getArithmOpsRule() {
		return getArithmOpsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
