// automatically generated by Xtext
grammar ardsl.Ardsl with org.eclipse.xtext.common.Terminals

import "http://physics/1.0" as Physics
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://graphics/1.0" as Graphics
import "http://ontologicals/1.0" as Ontologicals
import "http://gameloop/1.0" as Gameloop

//preguntar a lissete sobre wizards

Ontological returns Ontologicals::Ontological:
	'Game'
	name=EString
	'{'
		('URI' URI=EString)?
		'elements' '{' classes+=Class ( "," classes+=Class)* '}' 
	'}'
	;


EString returns ecore::EString:
	STRING | ID;

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
EInt returns ecore::EInt:
	'-'? INT
;
Class returns Ontologicals::Class:
	
	name=EString
	'{'
		(attributes+=Attribute ( "," attributes+=Attribute)*)?
		('dependences' '{' references+=Reference ( "," references+=Reference)* '}' )?
	'}'
	(abstract?='abstract')?
	(noSCN?='invisible')?;

Attribute returns Ontologicals::Attribute:
	
	
	name=EString ':' type=EString '[' min=EString ',' max=EString ']' '=' default=EString
	
	(isParam?='isParam')?
	(isKey?='isKey')?
	(readOnly?='readOnly')?;

Reference returns Ontologicals::Reference:
	name=EString
		('containtment' containtment=EString)?
		'min' min=EString
		'max' max=EString
		'target' target=EString
		('opposite' opposite=EString)?;

Graphic returns Graphics::Graphic:
	'Graphic'':'
	'game' ontoModel=[Ontologicals::Ontological|EString]
	classes+=GraphicClass
;

GraphicClass returns Graphics::GraphicClass:
	
	'versions'
	'constraints' '{' constraints=Constraints '}'
;

Constraints returns Graphics::Constraints:
	'plane' planes=Planes ','
	overlapping?='overlaps' ','
	'sizeMin' sizeMin=EDouble ','
	'sizeMax' sizeMax=EDouble ','
	'xVariation' xToOriginPos=EDouble ','
	'yVariation' yToOriginPos=EDouble ','
	'zVariation' zToOriginPos=EDouble ','
	'rotation' rotation=EInt
;

Physics returns Physics::Physic:
	'Physics'
	classes+=PhysicClass
;

PhysicClass returns Physics::PhysicClass:
	'body' '{' physicBody=PhysicBody '}' ','
	('forces' forces+=Forces ( "," forces+=Forces)*)?
	'contacts' '{' bitMasks=BitMasks '}'
;

PhysicBody returns Physics::PhysicBody:
	'mass' mass=EDouble
	'bodyType' bodyType=BodyType
	'charge' charge=EDouble
	'friction' friction=EDouble
	'rollingFriction' rollingFriction=EDouble
	'restitution' restitution=EDouble
	'damping' damping=EDouble
	'angularDamping' angularDamping=EDouble
;

Forces returns Physics::Force:
	name=EString ':' 'gesture' gesture=EString 
	('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
;

BitMasks returns Physics::BitMasks:
	'id' category=EInt ','
	'collision' collision=EInt ','
	'contact' contactTest=EInt
;

Gameloop returns Gameloop::Game:
	'Gamelogic''{'
	'Display'':'
	'start' start=EString ','
	'win' win=EString ','
	'lose' lose=EString ','
	'score' '{' score=Score '}' 
	('Actions' '{' actionsTriggers+=Actions ( "," actionsTriggers+=Actions)* '}')?
	('Collisions' '{' collisions+=Collisions ( "," collisions+=Collisions)* '}')?
	('Buttons' '{' gamepad+=GamePad '}')?
	('Elements' '{' objInit+=ObjInit ("," objInit+=ObjInit)* '}')?
	'}'
;

Score returns Gameloop::ScoreSystem:
	'start' start=EInt ','
	'goal' finish=EInt ','
	'lives' lives=EInt
;

Actions returns Gameloop::Trigger:
	name=EString
	('display' '->' message=EString)?
	('score' '->' scoreChange=EInt)?
	('timeEach' '->' timeTrigger=EInt)?
	('changes' '->' '{' physicChanges+=PhysicChanges (',' physicChanges+=PhysicChanges)* '}' )?
;

Collisions returns Gameloop::Collision:
	'element' classA=EString 'to' classB=EString '->' 
;

PhysicChanges returns Gameloop::PhysicChange:
	'do' action=Action
	('where' position=Position)?
	('scale' scale=EDouble)?
	('stat' attribute=EString)?
	('changeStat' changeValue=EInt)?
;

GamePad returns Gameloop::GamePad:
	name=EString '->'
;

ObjInit returns Gameloop::ObjInit:
	name=EString '[' posX=EDouble ',' posY=EDouble ',' posZ=EDouble ']'
;

enum Planes returns Graphics::Planes:
	any='any'|horizontal='horizontal'|vertical='vertical'
;
enum BodyType returns Physics::BodyType:
	static='static'|dynamic='dynamic'|kinematic='kinematic'
;
enum Action returns Gameloop::Action:
	create='create'|edit='edit'|delete='delete'
;
enum Position returns Gameloop::Position:
	front='front'|default='default'|back='back'
;
